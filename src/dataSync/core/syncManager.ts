import { ApiClient } from './apiClient';
import { DbClient } from './dbClient';

export class SyncManager {
  private api: ApiClient;
  public db: DbClient; // –î–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  private tables: string[];

  constructor(tables: string[], apiBaseUrl?: string) {
    this.api = new ApiClient(apiBaseUrl);
    this.db = new DbClient();
    this.tables = tables;
  }

  async init(): Promise<void> {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SyncManager...');
    await this.db.init(this.tables);
  }

  async sync(): Promise<void> {
    for (const table of this.tables) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Ç–∞–±–ª–∏—Ü—ã: ${table}`);
        const serverVersion = await this.api.getTableVersion(table);
        const localVersion = await this.getLocalVersion(table);

        if (serverVersion !== localVersion) {
          console.log(`üì• –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ${table}...`);
          const data = await this.api.getTableData(table);
          await this.db.putAll(table, data);
          await this.saveLocalVersion(table, serverVersion);
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} –∞–∫—Ç—É–∞–ª—å–Ω–∞`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${table}:`, error);
      }
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—Å–∏—è–º–∏
  async getLocalVersion(table: string): Promise<string> {
    const version = localStorage.getItem(`version_${table}`);
    return version || 'none';
  }

  async saveLocalVersion(table: string, version: string): Promise<void> {
    localStorage.setItem(`version_${table}`, version);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
  async getTableData(tableName: string): Promise<any[]> {
    return await this.db.getTable(tableName);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤–µ—Ä—Å–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
  async clearTableVersion(tableName: string): Promise<void> {
    localStorage.removeItem(`version_${tableName}`);
  }
}