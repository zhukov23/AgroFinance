// Global state for database version management
class DatabaseVersionManager {
  private static instance: DatabaseVersionManager;
  private dbVersion: number | null = null;
  private dbPromise: Promise<IDBDatabase> | null = null;
  private dbInstance: IDBDatabase | null = null;
  private initializingTables = new Set<string>();
  private readonly dbName = 'AgroFinanceDB';

  static getInstance(): DatabaseVersionManager {
    if (!DatabaseVersionManager.instance) {
      DatabaseVersionManager.instance = new DatabaseVersionManager();
    }
    return DatabaseVersionManager.instance;
  }

  async ensureDatabase(requiredTables: string[]): Promise<IDBDatabase> {
    // –ï—Å–ª–∏ –±–∞–∑–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å
    if (this.dbInstance) {
      const missingTables = requiredTables.filter(table => 
        !this.dbInstance!.objectStoreNames.contains(table)
      );
      
      if (missingTables.length === 0) {
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –Ω—É–∂–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏');
        return this.dbInstance;
      }
      
      // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
      console.log(`‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü: ${missingTables.join(', ')}, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É`);
      this.dbInstance.close();
      this.dbInstance = null;
      this.dbPromise = null;
    }

    // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–∂–µ –∏–¥–µ—Ç, –∂–¥–µ–º –µ–≥–æ
    if (this.dbPromise) {
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      return this.dbPromise;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.dbPromise = this.initializeDatabase(requiredTables);
    return this.dbPromise;
  }

  private async initializeDatabase(requiredTables: string[]): Promise<IDBDatabase> {
    console.log('üîß DatabaseVersionManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    console.log('üìã –¢—Ä–µ–±—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', requiredTables);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (this.dbVersion === null) {
      this.dbVersion = await this.determineDbVersion();
    }

    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.dbName, this.dbVersion!);

      request.onupgradeneeded = (event) => {
        console.log('üîß DatabaseVersionManager: onupgradeneeded —Å—Ä–∞–±–æ—Ç–∞–ª');
        const db = (event.target as IDBOpenDBRequest).result;
        console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ –≤–µ—Ä—Å–∏–∏ ${db.version}`);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        requiredTables.forEach(table => {
          if (!db.objectStoreNames.contains(table)) {
            console.log(`üìã –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${table}`);
            db.createObjectStore(table, { keyPath: 'id' });
          }
        });
      };

      request.onsuccess = () => {
        console.log('üîß DatabaseVersionManager: onsuccess —Å—Ä–∞–±–æ—Ç–∞–ª');
        this.dbInstance = request.result;
        console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞, –≤–µ—Ä—Å–∏—è: ${this.dbInstance.version}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        const missingTables = requiredTables.filter(table => 
          !this.dbInstance!.objectStoreNames.contains(table)
        );
        
        if (missingTables.length > 0) {
          console.warn(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—ä–µ–∫—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${missingTables.join(', ')}`);
          this.dbInstance.close();
          this.dbInstance = null;
          this.dbPromise = null;
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
          this.dbVersion = this.dbVersion! + 1;
          console.log('üîß DatabaseVersionManager: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º init —Å –≤–µ—Ä—Å–∏–µ–π:', this.dbVersion);
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
          this.initializeDatabase(requiredTables).then(resolve).catch(reject);
          return;
        }
        
        console.log('‚úÖ DatabaseVersionManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        resolve(this.dbInstance);
      };

      request.onerror = () => {
        console.error('‚ùå DatabaseVersionManager: –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', request.error);
        this.dbPromise = null;
        reject(request.error);
      };

      request.onblocked = () => {
        console.warn('‚ö†Ô∏è DatabaseVersionManager: –û—Ç–∫—Ä—ã—Ç–∏–µ –ë–î –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
      };
    });
  }

  private async determineDbVersion(): Promise<number> {
    return new Promise((resolve) => {
      console.log('üîß DatabaseVersionManager: –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –ë–î...');
      const request = indexedDB.open(this.dbName);
      
      request.onsuccess = () => {
        const db = request.result;
        const currentVersion = db.version;
        db.close();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é + 1 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â
        const newVersion = currentVersion + 1;
        console.log(`üî¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –±–∞–∑—ã: —Ç–µ–∫—É—â–∞—è ${currentVersion}, –Ω–æ–≤–∞—è ${newVersion}`);
        resolve(newVersion);
      };

      request.onerror = () => {
        // –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é 1
        console.log('üî¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é 1');
        resolve(1);
      };
    });
  }

  close(): void {
    if (this.dbInstance) {
      this.dbInstance.close();
      this.dbInstance = null;
    }
    this.dbPromise = null;
  }

  reset(): void {
    this.close();
    this.dbVersion = null;
  }
}

export class DbClient {
  private dbManager = DatabaseVersionManager.getInstance();
  private db: IDBDatabase | null = null;

  async init(tables: string[]): Promise<void> {
    if (this.db) {
      console.log('‚úÖ DbClient: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return;
    }

    console.log('üîß DbClient: –ù–∞—á–∏–Ω–∞–µ–º init —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏:', tables);
    
    try {
      this.db = await this.dbManager.ensureDatabase(tables);
      console.log('‚úÖ DbClient: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå DbClient: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  private ensureInitialized() {
    if (!this.db) throw new Error('Database not initialized. Please call init() first.');
  }

  async getTable(tableName: string): Promise<any[]> {
    this.ensureInitialized();
    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([tableName], 'readonly');
      const store = transaction.objectStore(tableName);
      const request = store.getAll();
      request.onsuccess = () => resolve(request.result || []);
      request.onerror = () => reject(request.error);
    });
  }

  async putAll(tableName: string, records: any[]): Promise<void> {
    this.ensureInitialized();
    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([tableName], 'readwrite');
      const store = transaction.objectStore(tableName);
      records.forEach(record => store.put(record));
      transaction.oncomplete = () => resolve();
      transaction.onerror = () => reject(transaction.error);
    });
  }

  async insert(tableName: string, record: any): Promise<void> {
    this.ensureInitialized();
    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([tableName], 'readwrite');
      const store = transaction.objectStore(tableName);
      const request = store.add(record);
      request.onsuccess = () => resolve();
      request.onerror = () => reject(request.error);
    });
  }

  async deleteRecord(tableName: string, key: number): Promise<void> {
    this.ensureInitialized();
    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([tableName], 'readwrite');
      const store = transaction.objectStore(tableName);
      const request = store.delete(key);
      request.onsuccess = () => resolve();
      request.onerror = () => reject(request.error);
    });
  }

  close(): void {
    // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –Ω–∞–ø—Ä—è–º—É—é, –æ—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    this.db = null;
  }
}

export const dbClient = new DbClient();

export const clearDatabase = async (dbName: string = 'AgroFinanceDB'): Promise<void> => {
  return new Promise((resolve, reject) => {
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: ${dbName}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    DatabaseVersionManager.getInstance().close();
    
    const deleteRequest = indexedDB.deleteDatabase(dbName);
    
    deleteRequest.onsuccess = () => {
      console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${dbName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      DatabaseVersionManager.getInstance().reset();
      resolve();
    };
    
    deleteRequest.onerror = () => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${dbName}:`, deleteRequest.error);
      reject(deleteRequest.error);
    };
    
    deleteRequest.onblocked = () => {
      console.warn(`‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${dbName} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–∑–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º)`);
    };
  });
};