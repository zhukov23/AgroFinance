// src/hooks/useEntityLoader.ts

import { useState, useEffect, useCallback, useRef } from 'react';
import { BaseEntity } from '../types/entity.types';

export interface EntityLoaderConfig {
  syncConfig: any; // –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  entityTableName: string; // –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
  relatedTableNames?: string[]; // –∏–º–µ–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
  autoInitialize?: boolean;
  autoSync?: boolean;
}

export interface UseEntityLoaderReturn<T extends BaseEntity> {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean;
  isInitialized: boolean;
  error: string | null;
  
  // –î–∞–Ω–Ω—ã–µ
  tableData: any;
  
  // –ú–µ—Ç–æ–¥—ã
  loadEntity: (id: number) => Promise<T | null>;
  loadTableData: (tableName: string) => Promise<any[]>;
  performSync: () => Promise<void>;
  clearError: () => void;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
 */
export const useEntityLoader = <T extends BaseEntity>(
  config: EntityLoaderConfig,
  useSyncDataHook: any, // —Ö—É–∫ useSyncData
  errorHandler: (error: any) => void
): UseEntityLoaderReturn<T> => {
  
  const dataLoadedRef = useRef(false);
  const isLoadingDataRef = useRef(false);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
  const {
    isInitialized,
    isLoading: syncLoading,
    error: syncError,
    loadTableData,
    tableData,
    sync: performSync
  } = useSyncDataHook(config.syncConfig, { 
    autoInitialize: config.autoInitialize ?? true, 
    autoSync: config.autoSync ?? false 
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [localError, setLocalError] = useState<string | null>(null);
  
  const isLoading = syncLoading || isLoadingDataRef.current;
  const error = localError || syncError;

  const clearError = useCallback(() => {
    setLocalError(null);
  }, []);

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ ID
  const loadEntity = useCallback(async (id: number): Promise<T | null> => {
    if (isLoadingDataRef.current) {
      console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return null;
    }

    try {
      isLoadingDataRef.current = true;
      clearError();
      
      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å ID: ${id} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${config.entityTableName}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
      const entityData = tableData?.[config.entityTableName] || [];
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      if (entityData.length === 0) {
        console.log('üì• –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
        await performSync();
        return null; // –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã–∑–æ–≤—É—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
      }
      
      // –ò—â–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const foundEntity = entityData.find((entity: T) => entity.id === id);
      
      if (!foundEntity) {
        throw new Error(`–°—É—â–Ω–æ—Å—Ç—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ ${config.entityTableName}`);
      }
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å –∏–∑ ${config.entityTableName}:`, foundEntity);
      return foundEntity;
      
    } catch (err) {
      const errorMessage = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–Ω–æ—Å—Ç–∏: ${err}`;
      setLocalError(errorMessage);
      errorHandler(errorMessage);
      return null;
    } finally {
      isLoadingDataRef.current = false;
    }
  }, [tableData, config.entityTableName, performSync, clearError, errorHandler]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    isInitialized,
    error,
    
    // –î–∞–Ω–Ω—ã–µ
    tableData,
    
    // –ú–µ—Ç–æ–¥—ã
    loadEntity,
    loadTableData,
    performSync,
    clearError
  };
};

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 */
export const getRelatedEntities = <R extends BaseEntity>(
  tableData: any,
  tableName: string,
  parentId: number,
  parentIdField: string = 'organization_id'
): R[] => {
  const relatedData = tableData?.[tableName] || [];
  return relatedData.filter((item: R) => 
    (item as any)[parentIdField] === parentId && !(item as any).closing_date
  );
};

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
 */
export const createNewEntity = <T extends BaseEntity>(defaultValues: Partial<T>): T => {
  return {
    id: 0, // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
    is_active: true,
    ...defaultValues
  } as T;
};