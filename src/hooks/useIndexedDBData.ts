import { useState, useEffect, useCallback } from 'react';
import { useSyncData } from '../dataSync';
import { useSyncMonitor } from './useSyncMonitor';
import { SyncConfig } from '../dataSync/utils/syncTypes';

interface UseIndexedDBDataOptions {
  autoSync?: boolean;
}

interface UseIndexedDBDataReturn<T = any> {
  data: T[];
  isLoading: boolean;
  error: string | null;
  refresh: () => Promise<void>;
  sync: () => Promise<void>;
  clearError: () => void;
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã IndexedDB
 * –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ useSyncData –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 * 
 * @param tableName - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ IndexedDB
 * @param syncConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @param options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
export function useIndexedDBData<T = any>(
  tableName: string,
  syncConfig: SyncConfig,
  options: UseIndexedDBDataOptions = {}
): UseIndexedDBDataReturn<T> {
  const { autoSync = true } = options;
  const [data, setData] = useState<T[]>([]);
  const [hasInitialLoad, setHasInitialLoad] = useState(false);
  const [syncId] = useState(() => `${tableName}_${Date.now()}`);

  // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –µ—Å–ª–∏ –Ω–µ—Ç SyncMonitorProvider)
  const { registerSync, updateSync, unregisterSync } = useSyncMonitor();

  const {
    isInitialized,
    isLoading,
    error,
    lastSyncResult,
    loadTableData,
    sync: performSync,
    clearError
  } = useSyncData(syncConfig, { 
    autoInitialize: true, 
    autoSync: false // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ useSyncData, —É–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–∏
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω)
  useEffect(() => {
    if (registerSync) {
      registerSync({
        id: syncId,
        tableName,
        displayName: syncConfig.displayName || tableName,
        status: 'idle',
        lastUpdate: new Date().toISOString()
      });
    }

    // –û—á–∏—â–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (unregisterSync) {
        unregisterSync(syncId);
      }
    };
  }, [tableName, syncConfig.displayName, syncId, registerSync, unregisterSync]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (–µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω)
  useEffect(() => {
    if (updateSync) {
      let status: 'idle' | 'loading' | 'success' | 'error';
      
      if (isLoading) {
        status = 'loading';
      } else if (error) {
        status = 'error';
      } else if (data.length > 0) {
        status = 'success';
      } else {
        status = 'idle';
      }

      updateSync(syncId, { status });
    }
  }, [isLoading, error, data.length, syncId, updateSync]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ IndexedDB
  const loadData = useCallback(async () => {
    if (!isInitialized) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ ${tableName}...`);
      return;
    }
    
    try {
      console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName} –∏–∑ IndexedDB...`);
      const tableData = await loadTableData(tableName);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ ${tableName}:`, tableData.length);
      setData(tableData);
      setHasInitialLoad(true);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, err);
    }
  }, [isInitialized, loadTableData, tableName]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ IndexedDB)
  const refresh = useCallback(async () => {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ${tableName}...`);
    await loadData();
  }, [loadData]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  const sync = useCallback(async () => {
    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${tableName} —Å —Å–µ—Ä–≤–µ—Ä–æ–º...`);
    try {
      await performSync();
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${tableName}:`, err);
    }
  }, [performSync, tableName]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
  useEffect(() => {
    if (isInitialized && !hasInitialLoad) {
      console.log(`üîß –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ ${tableName}...`);
      loadData();
    }
  }, [isInitialized, hasInitialLoad, loadData]);

  // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (
      isInitialized && 
      hasInitialLoad && 
      data.length === 0 && 
      autoSync && 
      !isLoading && 
      !error
    ) {
      console.log(`üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ${tableName} (–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç)...`);
      sync();
    }
  }, [isInitialized, hasInitialLoad, data.length, autoSync, isLoading, error, sync, tableName]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (lastSyncResult?.success) {
      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ ${tableName}...`);
      loadData();
    }
  }, [lastSyncResult, loadData, tableName]);

  // Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  useEffect(() => {
    console.log(`üîç ${tableName} Debug:`, {
      isInitialized,
      isLoading,
      hasInitialLoad,
      dataLength: data.length,
      error: error ? error.substring(0, 50) + '...' : null,
      autoSync,
      lastSyncSuccess: lastSyncResult?.success
    });
  }, [tableName, isInitialized, isLoading, hasInitialLoad, data.length, error, autoSync, lastSyncResult]);

  return {
    data,
    isLoading,
    error,
    refresh,
    sync,
    clearError
  };
}