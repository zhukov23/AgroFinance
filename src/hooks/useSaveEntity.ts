// src/hooks/useSaveEntity.ts

import { useState, useCallback } from 'react';
import { BaseEntity, RelatedEntity } from '../types/entity.types';
import { UniversalSaveService, SaveServiceOptions } from '../services/UniversalSaveService';

export interface UseSaveEntityReturn<T extends BaseEntity, R extends RelatedEntity = RelatedEntity> {
  isSaving: boolean;
  saveChanges: (
    entity: T, 
    relatedEntities: R[],
    mainTableName: string,
    relatedTableName?: string
  ) => Promise<boolean>;
}

export const useSaveEntity = <T extends BaseEntity, R extends RelatedEntity = RelatedEntity>(
  options: SaveServiceOptions = {}
): UseSaveEntityReturn<T, R> => {
  
  const [isSaving, setIsSaving] = useState(false);
  const saveService = new UniversalSaveService(options);

  const saveChanges = useCallback(async (
    entity: T,
    relatedEntities: R[] = [],
    mainTableName: string,
    relatedTableName?: string
  ): Promise<boolean> => {
    
    if (!entity) {
      console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return false;
    }
    
    setIsSaving(true);
    
    try {
      console.log('üíæ useSaveEntity: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏...');
      console.log('üìä –¢–∞–±–ª–∏—Ü–∞:', mainTableName);
      console.log('üìä –°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', relatedEntities.length);
      
      let success: boolean;
      
      if (relatedEntities.length > 0 && relatedTableName) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
        success = await saveService.saveEntityWithRelated(
          entity,
          relatedEntities,
          mainTableName,
          relatedTableName,
          options
        );
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
        success = await saveService.saveEntity(entity, mainTableName, options);
      }
      
      if (success) {
        console.log('‚úÖ useSaveEntity: –°—É—â–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      }
      
      return success;
      
    } catch (err) {
      // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ useValidationErrorHandler
      throw err;
    } finally {
      setIsSaving(false);
    }
  }, [saveService, options]);

  return {
    isSaving,
    saveChanges
  };
};