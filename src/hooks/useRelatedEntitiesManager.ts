// src/hooks/useRelatedEntitiesManager.ts

import { useState, useCallback } from 'react';
import { BaseEntity, RelatedEntity } from '../types/entity.types';
import { hasArrayChanges } from '../utils/validation.utils';

export interface RelatedEntitiesConfig<R extends RelatedEntity> {
  parentIdField?: string; // –ø–æ–ª–µ —Å–≤—è–∑–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'organization_id')
  defaultValues?: Partial<R>; // –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
  generateTempId?: () => number; // —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö ID
}

export interface UseRelatedEntitiesManagerReturn<R extends RelatedEntity> {
  // –î–∞–Ω–Ω—ã–µ
  entities: R[];
  originalEntities: R[];
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  hasChanges: boolean;
  
  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  addEntity: (entityData: Omit<R, 'id' | 'parent_id'>) => void;
  updateEntity: (id: number, updates: Partial<R>) => void;
  removeEntity: (id: number) => void;
  resetEntities: () => void;
  setEntities: (entities: R[]) => void;
  setOriginalEntities: (entities: R[]) => void;
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  setPrimary?: (id: number) => void; // –¥–ª—è –∑–∞–ø–∏—Å–µ–π —Å —Ñ–ª–∞–≥–æ–º is_primary
  getByField?: (field: keyof R, value: any) => R | undefined;
  filterByField?: (field: keyof R, value: any) => R[];
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
 */
export const useRelatedEntitiesManager = <R extends RelatedEntity>(
  config: RelatedEntitiesConfig<R> = {},
  parentId?: number
): UseRelatedEntitiesManagerReturn<R> => {
  
  const {
    parentIdField = 'organization_id',
    defaultValues = {},
    generateTempId = () => Date.now()
  } = config;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
  const [entities, setEntities] = useState<R[]>([]);
  const [originalEntities, setOriginalEntities] = useState<R[]>([]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hasChanges = hasArrayChanges(entities, originalEntities);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
const addEntity = useCallback((entityData: Omit<R, 'id' | 'parent_id'>) => {
  const baseEntity = {
    ...defaultValues,
    ...entityData,
    id: generateTempId(),
    is_active: true
  };
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parentIdField
  const newEntity = {
    ...baseEntity,
    [parentIdField]: parentId || generateTempId()
  } as R;
  
  setEntities(prev => [...prev, newEntity]);
  console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:', newEntity);
}, [defaultValues, generateTempId, parentId, parentIdField]);
    

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
  const updateEntity = useCallback((id: number, updates: Partial<R>) => {
    setEntities(prev => prev.map(entity => 
      entity.id === id ? { ...entity, ...updates } : entity
    ));
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Å ID:', id);
  }, []);

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
  const removeEntity = useCallback((id: number) => {
    setEntities(prev => prev.filter(entity => entity.id !== id));
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Å ID:', id);
  }, []);

  // –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const resetEntities = useCallback(() => {
    setEntities([...originalEntities]);
    console.log('üîÑ –°–±—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π');
  }, [originalEntities]);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ (–¥–ª—è –∑–∞–ø–∏—Å–µ–π —Å is_primary)
  const setPrimary = useCallback((id: number) => {
    setEntities(prev => prev.map(entity => ({
      ...entity,
      is_primary: entity.id === id
    } as R)));
    console.log('‚≠ê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å —Å ID:', id);
  }, []);

  // –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—é
  const getByField = useCallback((field: keyof R, value: any): R | undefined => {
    return entities.find(entity => entity[field] === value);
  }, [entities]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—é
  const filterByField = useCallback((field: keyof R, value: any): R[] => {
    return entities.filter(entity => entity[field] === value);
  }, [entities]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    entities,
    originalEntities,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    hasChanges,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    addEntity,
    updateEntity,
    removeEntity,
    resetEntities,
    setEntities,
    setOriginalEntities,
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    setPrimary,
    getByField,
    filterByField
  };
};

/**
 * –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
 */
export const RelatedEntitiesUtils = {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
   */
  createConfig: <R extends RelatedEntity>(
    parentIdField: string,
    defaultValues: Partial<R>,
    generateTempId?: () => number
  ): RelatedEntitiesConfig<R> => ({
    parentIdField,
    defaultValues,
    generateTempId
  }),

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—é
   */
  groupByField: <R extends RelatedEntity>(
    entities: R[],
    field: keyof R
  ): Record<string, R[]> => {
    return entities.reduce((groups, entity) => {
      const key = String(entity[field]);
      if (!groups[key]) groups[key] = [];
      groups[key].push(entity);
      return groups;
    }, {} as Record<string, R[]>);
  },

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
   */
  validateEntities: <R extends RelatedEntity>(
    entities: R[],
    requiredFields: Array<keyof R>
  ): { isValid: boolean; errors: string[] } => {
    const errors: string[] = [];
    
    entities.forEach((entity, index) => {
      requiredFields.forEach(field => {
        if (!entity[field]) {
          errors.push(`–ó–∞–ø–∏—Å—å ${index + 1}: –ø–æ–ª–µ "${String(field)}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ`);
        }
      });
    });
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }
};