// src/hooks/useValidationErrorHandler.ts
import { useSuccessToast } from '../components/Common/MessageToast/SuccessToast';
import { useState, useCallback } from 'react';
import { SaveErrorData } from '../types/validation.types';

export interface UseValidationErrorHandlerReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫
  localError: string | null;
  saveErrorData: SaveErrorData | null;
  
  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∞–º–∏
  setLocalError: (error: string | null) => void;
  setSaveErrorData: (errorData: SaveErrorData | null) => void;
  clearError: () => void;
  clearSaveError: () => void;
  clearAllErrors: () => void;
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  handleSaveError: (error: any) => void;
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—Ö–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
  handleSuccess: (message: string, details?: string) => void;
}

export const useValidationErrorHandler = (): UseValidationErrorHandlerReturn => {
  
  const [localError, setLocalError] = useState<string | null>(null);
  const [saveErrorData, setSaveErrorData] = useState<SaveErrorData | null>(null);
  const { showSuccess } = useSuccessToast();
  
  const clearError = useCallback(() => {
    setLocalError(null);
  }, []);

  const clearSaveError = useCallback(() => {
    setSaveErrorData(null);
  }, []);

  const clearAllErrors = useCallback(() => {
    setLocalError(null);
    setSaveErrorData(null);
  }, []);

  const handleSuccess = useCallback((message: string, details?: string) => {
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    clearAllErrors();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showSuccess(message, details);
  }, [showSuccess, clearAllErrors]);

  const handleSaveError = useCallback((error: any) => {
    console.error('‚ùå handleSaveError –≤—ã–∑–≤–∞–Ω —Å:', error);
    console.log('üîç –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error, error);
    console.log('üîç error.type:', error?.type);
    console.log('üîç error.validationErrors:', error?.validationErrors);

    if (error && error.type === 'validation' && error.validationErrors) {
      console.log('üìã ‚úÖ –£–°–õ–û–í–ò–ï –í–´–ü–û–õ–ù–ï–ù–û: –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
      console.log('üìã –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º saveErrorData:', error.validationErrors);
      setSaveErrorData(error.validationErrors);
      setLocalError(null);
    } else {
      console.log('üîç ‚ùå –£–°–õ–û–í–ò–ï –ù–ï –í–´–ü–û–õ–ù–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É');
      setLocalError(error instanceof Error ? error.message : String(error));
      setSaveErrorData(null);
    }
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫
    localError,
    saveErrorData,
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∞–º–∏
    setLocalError,
    setSaveErrorData,
    clearError,
    clearSaveError,
    clearAllErrors,
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    handleSaveError,
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—Ö–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
    handleSuccess
  };
};