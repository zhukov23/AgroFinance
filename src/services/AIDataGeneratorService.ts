// src/services/AIDataGeneratorService.ts
import {DEFAULT_API_BASE_URL} from '../dataSync/index';
export interface AIGeneratorOptions {
  apiBaseUrl?: string;
  onStatusChange?: (status: string) => void;
  onError?: (error: string) => void;
}

export interface AIGenerationConfig {
  [key: string]: any;
}

export interface AIGenerationResult<T = any> {
  success: boolean;
  data?: T[];
  error?: string;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AI
 */
export class AIDataGeneratorService {
  private apiBaseUrl: string;
  private onStatusChange?: (status: string) => void;
  private onError?: (error: string) => void;

  constructor(options: AIGeneratorOptions = {}) {
    this.apiBaseUrl = options.apiBaseUrl || DEFAULT_API_BASE_URL;
    this.onStatusChange = options.onStatusChange;
    this.onError = options.onError;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ AI API
   * @param config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async generateData<T = any>(config: AIGenerationConfig): Promise<T[]> {
    console.log('ü§ñ AIDataGeneratorService: –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
    
    this.updateStatus('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...');

    try {
      const response = await fetch(`${this.apiBaseUrl}/api/ai/generate-test-data`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(config)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result: AIGenerationResult<T> = await response.json();
      console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI:', result);

      if (!result.success || !result.data || result.data.length === 0) {
        throw new Error(result.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI —Å–µ—Ä–≤–µ—Ä–∞');
      }

      this.updateStatus('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã AI');
      console.log('‚úÖ AIDataGeneratorService: –î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');

      return result.data;

    } catch (err) {
      const errorMessage = `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AI: ${err}`;
      this.handleError(errorMessage);
      throw new Error(errorMessage);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private updateStatus(status: string): void {
    if (this.onStatusChange) {
      this.onStatusChange(status);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
   */
  private handleError(error: string): void {
    console.error('‚ùå AIDataGeneratorService:', error);
    if (this.onError) {
      this.onError(error);
    }
  }
}

/**
 * –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
 */
export const createAIDataGenerator = (options?: AIGeneratorOptions): AIDataGeneratorService => {
  return new AIDataGeneratorService(options);
};