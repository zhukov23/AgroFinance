// src/services/UniversalSaveService.ts

import { BatchSaveRequest, BatchSaveResponse, BatchOperation } from '../types/api.types';
import { BaseEntity, RelatedEntity } from '../types/entity.types';
import { prepareDataForServer, generateTempId, isTempId } from '../utils/dataTransformation.utils';

export interface SaveServiceOptions {
  apiBaseUrl?: string;
  validateSchema?: boolean;
  validateDependencies?: boolean;
  stopOnError?: boolean;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ batch API
 */
export class UniversalSaveService {
  private apiBaseUrl: string;
  private defaultOptions: Required<SaveServiceOptions>;

  constructor(options: SaveServiceOptions = {}) {
    this.apiBaseUrl = options.apiBaseUrl || 'http://localhost:3000';
    this.defaultOptions = {
      apiBaseUrl: this.apiBaseUrl,
      validateSchema: true,
      validateDependencies: true,
      stopOnError: true
    };
  }

// –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å UniversalSaveService –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥:

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ—à–∞–≥–æ–≤–æ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
async saveEntityWithSteps<T extends BaseEntity, R extends RelatedEntity>(
  entity: T,
  relatedEntities: R[],
  mainTableName: string,
  relatedTableName: string,
  dependencies: any[], // SaveDependency[]
  options: Partial<SaveServiceOptions> = {}
): Promise<boolean> {
  
  const saveOptions = { ...this.defaultOptions, ...options };
  let createdIds: Record<string, number> = {};
  
  try {
    console.log('üíæ UniversalSaveService: –ü–æ—à–∞–≥–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
    console.log('üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å:', entity);
    console.log('üìä –°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', relatedEntities.length);

    // –®–ê–ì 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
    const mainTempId = generateTempId('main_entity');
    
    const mainOperation: BatchOperation = {
      type: entity.id && entity.id > 0 ? 'update' : 'create',
      table: mainTableName,
      tempId: mainTempId,
      data: prepareDataForServer(entity),
      ...(entity.id && entity.id > 0 ? { where: { id: entity.id } } : {})
    };

    const mainBatchRequest: BatchSaveRequest = {
      operations: [mainOperation],
      stopOnError: saveOptions.stopOnError,
      validateDependencies: saveOptions.validateDependencies,
      validateSchema: saveOptions.validateSchema
    };

    console.log('üì§ –®–ê–ì 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å:', mainBatchRequest);
    console.log('üì§ JSON —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(mainBatchRequest, null, 2));    

    const mainResponse = await fetch(`${this.apiBaseUrl}/api/data/batch`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(mainBatchRequest)
    });

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É:
    const mainResult: BatchSaveResponse = await mainResponse.json();
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –®–ê–ì 1:', mainResult);

if (!mainResponse.ok || !mainResult.success) {
  throw this.handleBatchError(mainResult, mainTableName, mainBatchRequest);
}

    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
    if (mainResult.ids && mainResult.ids[mainTempId]) {
      createdIds[mainTempId] = mainResult.ids[mainTempId];
      console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${createdIds[mainTempId]}`);
    }

    // –®–ê–ì 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
if (relatedEntities.length > 0 && relatedTableName) {
const relatedOperations: BatchOperation[] = relatedEntities.map((relatedEntity, index) => {
  const relatedTempId = generateTempId(`related_${index + 1}`);
  
  return {
    type: 'create', // ‚Üê –í—Å–µ–≥–¥–∞ create –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    table: relatedTableName,
    tempId: relatedTempId,
data: (() => {
  // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—è –±–∞–Ω–∫–∞ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
  const { bank_name, bank_bik, bank_correspondent_account, bank_address, bank_swift, ...cleanEntity } = relatedEntity as any;
  return {
    ...prepareDataForServer(cleanEntity),
    organization_id: createdIds[mainTempId] || entity.id
  };
})()
    // –£–±–∏—Ä–∞–µ–º where –ø–æ–ª–Ω–æ—Å—Ç—å—é
  };
});


      const relatedBatchRequest: BatchSaveRequest = {
        operations: relatedOperations,
        stopOnError: saveOptions.stopOnError,
        validateDependencies: saveOptions.validateDependencies,
        validateSchema: saveOptions.validateSchema
      };

      console.log('üì§ –®–ê–ì 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:', relatedBatchRequest);

      const relatedResponse = await fetch(`${this.apiBaseUrl}/api/data/batch`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(relatedBatchRequest)
      });

      const relatedResult: BatchSaveResponse = await relatedResponse.json();
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –®–ê–ì 2:', relatedResult);

// –í–æ –≤—Ç–æ—Ä–æ–º –≤—ã–∑–æ–≤–µ:
if (!relatedResponse.ok || !relatedResult.success) {
  throw this.handleBatchError(relatedResult, relatedTableName, relatedBatchRequest);
}

      console.log('‚úÖ –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }

    console.log('‚úÖ –ü–æ—à–∞–≥–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—à–∞–≥–æ–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
    throw error;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç batch API
 */
private handleBatchError(result: BatchSaveResponse, tableName: string, requestBody: any): any {
  console.log('üîç handleBatchError –ø–æ–ª—É—á–∏–ª:', result);
  console.log('üîç result.data:', result.data); // –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
  
  // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - validationErrors –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞
  if (result.validationErrors && Array.isArray(result.validationErrors)) {
    console.log('üìã –ü–£–¢–¨ 1: validationErrors –≤ –∫–æ—Ä–Ω–µ');
    console.log('üìã –ù–∞–π–¥–µ–Ω—ã validationErrors –≤ –∫–æ—Ä–Ω–µ:', result.validationErrors);
    const adaptedErrorData = {
      failed: result.validationErrors.map((error: any, index: number) => ({
        error: error.error || result.error || 'Validation error',
        executionOrder: index + 1,
        operation: error.operation || 'create',
        table: error.table || tableName,
        tempId: error.tempId || `validation_error_${index + 1}`,
        validationErrors: [error] // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤
      })),
      requestInfo: {
        url: `${this.apiBaseUrl}/api/data/batch`,
        method: 'POST',
        body: requestBody, // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        timestamp: new Date().toISOString()
      }
    };
    console.log('üìã –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', adaptedErrorData);
    return { validationErrors: adaptedErrorData, type: 'validation' };
  }
  
  if (result.data && result.data.failed && Array.isArray(result.data.failed)) {
    console.log('üìã –ü–£–¢–¨ 2: data.failed –Ω–∞–π–¥–µ–Ω');
    
    const adaptedErrorData = {
      failed: result.data.failed,
      requestInfo: {
        url: `${this.apiBaseUrl}/api/data/batch`,
        method: 'POST',
        body: requestBody,
        timestamp: new Date().toISOString()
      }
    };
    console.log('üìã –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–∑ data.failed:', adaptedErrorData);
    console.log('üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å type validation');
    return { validationErrors: adaptedErrorData, type: 'validation' };
  }
    // –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞
  console.log('üìã –ü–£–¢–¨ 3: –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞');
  return new Error(`HTTP error: ${result.error || 'Unknown error'}`);
}
/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
 */
async saveEntityWithRelated<T extends BaseEntity, R extends RelatedEntity>(
  entity: T,
  relatedEntities: R[],
  mainTableName: string,
  relatedTableName: string,
  options: Partial<SaveServiceOptions> = {}
): Promise<boolean> {
  
  const saveOptions = { ...this.defaultOptions, ...options };
  
  try {
    console.log('üíæ UniversalSaveService: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
    console.log('üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å:', entity);
    console.log('üìä –°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', relatedEntities.length);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è batch-–∑–∞–ø—Ä–æ—Å–∞
    const operations: BatchOperation[] = [];
    const mainTempId = generateTempId('main_entity');

    // –û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
    operations.push({
      type: entity.id && entity.id > 0 ? 'update' : 'create',
      table: mainTableName,
      tempId: mainTempId,
      data: prepareDataForServer(entity),
      ...(entity.id && entity.id > 0 ? { where: { id: entity.id } } : {})
    });

    // –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    relatedEntities.forEach((relatedEntity, index) => {
      const relatedTempId = generateTempId(`related_${index + 1}`);
      
      operations.push({
        type: relatedEntity.id && relatedEntity.id > 0 ? 'update' : 'create',
        table: relatedTableName,
        tempId: relatedTempId,
        data: {
          ...prepareDataForServer(relatedEntity),
          parent_id: entity.id && entity.id > 0 ? entity.id : mainTempId
        },
        ...(relatedEntity.id && relatedEntity.id > 0 ? { where: { id: relatedEntity.id } } : {})
      });
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º batch-–∑–∞–ø—Ä–æ—Å
    const batchRequest: BatchSaveRequest = {
      operations,
      stopOnError: saveOptions.stopOnError,
      validateDependencies: saveOptions.validateDependencies,
      validateSchema: saveOptions.validateSchema
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch-–∑–∞–ø—Ä–æ—Å:', batchRequest);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(`${this.apiBaseUrl}/api/data/batch`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(batchRequest)
    });

    const result: BatchSaveResponse = await response.json();
    console.log('üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    if (!response.ok || !result.success) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
// –í —Ñ—É–Ω–∫—Ü–∏–∏ saveEntityWithRelated, –≤ –±–ª–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:

if (result.validationErrors && Array.isArray(result.validationErrors) && result.validationErrors.length > 0) {
  console.log('üìã –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è ErrorToast');
  
  // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è ErrorToast —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ
  const adaptedErrorData = {
    failed: result.validationErrors.map((validationError: any, index: number) => ({
      error: validationError.error || result.error || 'Validation error',
      executionOrder: validationError.executionOrder || index + 1,
      operation: validationError.operation || 'create',
      table: validationError.table || mainTableName,
      tempId: validationError.tempId || `validation_error_${index + 1}`,
      validationErrors: validationError.validationErrors || [validationError]
    })),
    requestInfo: {
      url: `${this.apiBaseUrl}/api/data/batch`,
      method: 'POST',
      body: batchRequest,
      timestamp: new Date().toISOString()
    }
  };
  
  console.log('üìã –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è ErrorToast:', adaptedErrorData);
  throw { validationErrors: adaptedErrorData, type: 'validation' };
}
    }

    console.log('‚úÖ –°—É—â–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', result);
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ UniversalSaveService:', error);
    throw error;
  }
}

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  async saveEntity<T extends BaseEntity>(
    entity: T,
    tableName: string,
    options: Partial<SaveServiceOptions> = {}
  ): Promise<boolean> {
    return this.saveEntityWithRelated(entity, [], tableName, '', options);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è batch-–∑–∞–ø—Ä–æ—Å–∞
   */
  private createOperation<T extends Record<string, any>>(
    entity: T,
    tableName: string,
    tempId: string,
    isUpdate: boolean = false
  ): BatchOperation {
    return {
      type: isUpdate ? 'update' : 'create',
      table: tableName,
      tempId,
      data: prepareDataForServer(entity),
      ...(isUpdate && (entity as any).id ? { where: { id: (entity as any).id } } : {})
    };
  }
}