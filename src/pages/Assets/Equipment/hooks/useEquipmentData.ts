// src/pages/Assets/Equipment/hooks/useEquipmentData.ts

import { useState, useEffect, useCallback } from 'react';
import { useEntityLoader } from '../../../../hooks/useEntityLoader';
import { useSyncData } from '../../../../hooks/useSyncData';
import { equipmentSyncConfig } from '../config/syncConfig';
import { EquipmentData } from './useEquipmentEdit';
import { hasChanges } from '../../../../utils/validation.utils';

export interface UseEquipmentDataReturn {
  // –î–∞–Ω–Ω—ã–µ
  equipment: EquipmentData | null;
  originalEquipment: EquipmentData | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean;
  isInitialized: boolean;
  error: string | null;
  hasChanges: boolean;
  
  // –ú–µ—Ç–æ–¥—ã
  loadEquipment: (id: number) => Promise<void>;
  updateEquipment: (updates: Partial<EquipmentData>) => void;
  resetEquipment: () => void;
  setEquipment: (equipment: EquipmentData | null) => void;
  setOriginalEquipment: (equipment: EquipmentData | null) => void;
  initializeNewEquipment: () => void;
  clearError: () => void;
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∏
 */
export const useEquipmentData = (
  equipmentId?: number,
  errorHandler?: (error: any) => void
): UseEquipmentDataReturn => {
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏
  const [equipment, setEquipment] = useState<EquipmentData | null>(null);
  const [originalEquipment, setOriginalEquipment] = useState<EquipmentData | null>(null);
  const [isLoadingEquipment, setIsLoadingEquipment] = useState(false);
  const [loadAttempts, setLoadAttempts] = useState(0);
  const MAX_LOAD_ATTEMPTS = 3;

  // –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const {
    isInitialized,
    loadTableData,
    sync,
    error: syncError
  } = useSyncData(equipmentSyncConfig, {
    autoInitialize: true,
    autoSync: false
  });

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
const entityLoader = useEntityLoader<EquipmentData>(
  {
    syncConfig: equipmentSyncConfig,
    entityTableName: 'assets_equipment',  // –ë—ã–ª–æ: 'references_equipment'
    relatedTableNames: []
  },
  useSyncData,
  errorHandler || (() => {})
);


  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const currentHasChanges = hasChanges(equipment, originalEquipment);

  // –û–±—â–∞—è –æ—à–∏–±–∫–∞
  const error = syncError || entityLoader.error;

  // –°–±—Ä–æ—Å –ø—Ä–∏ —Å–º–µ–Ω–µ ID
  useEffect(() => {
    setLoadAttempts(0);
    setEquipment(null);
    setOriginalEquipment(null);
  }, [equipmentId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ ID
  const loadEquipment = useCallback(async (id: number) => {
    if (isLoadingEquipment) {
      console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É ID: ${id}`);
    setIsLoadingEquipment(true);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const allEquipment = await loadTableData('assets_equipment');
      console.log(`üìä –í—Å–µ–≥–æ —Ç–µ—Ö–Ω–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${allEquipment.length}`);
      
      if (allEquipment.length === 0) {
        console.log('üì• –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
        await sync();
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const equipmentAfterSync = await loadTableData('assets_equipment');
        console.log(`üìä –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏: ${equipmentAfterSync.length}`);
      }
      
      // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É
      const foundEquipment = allEquipment.find((item: any) => item.id === id);
      
      if (foundEquipment) {
        setEquipment(foundEquipment);
        setOriginalEquipment(foundEquipment);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞: ${foundEquipment.name}`);
      } else {
        console.log(`‚ùå –¢–µ—Ö–Ω–∏–∫–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ ${allEquipment.length} –∑–∞–ø–∏—Å–µ–π`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const availableIds = allEquipment.map((item: any) => item.id).slice(0, 10);
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ ID —Ç–µ—Ö–Ω–∏–∫–∏: ${availableIds.join(', ')}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏:', error);
      if (errorHandler) {
        errorHandler(error);
      }
    } finally {
      setIsLoadingEquipment(false);
    }
  }, [isLoadingEquipment, loadTableData, sync, errorHandler]);

  // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
  useEffect(() => {
    if (!equipmentId && !equipment && isInitialized) {
      initializeNewEquipment();
    }
  }, [equipmentId, isInitialized]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (equipmentId && isInitialized && !equipment && !isLoadingEquipment && loadAttempts < MAX_LOAD_ATTEMPTS) {
      setLoadAttempts(prev => prev + 1);
      loadEquipment(equipmentId);
    }
  }, [equipmentId, isInitialized, equipment, isLoadingEquipment, loadAttempts]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
  const initializeNewEquipment = useCallback(() => {
    const newEquipment: EquipmentData = {
      id: 0,
      name: '',
      category: '',
      is_active: true
    };
    
    setEquipment(newEquipment);
    setOriginalEquipment(newEquipment);
    console.log('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞');
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏
  const updateEquipment = useCallback((updates: Partial<EquipmentData>) => {
    setEquipment(prev => {
      if (!prev) return null;
      return { ...prev, ...updates };
    });
  }, []);

  // –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const resetEquipment = useCallback(() => {
    if (originalEquipment) {
      setEquipment({ ...originalEquipment });
      console.log('üîÑ –°–±—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏');
    }
  }, [originalEquipment]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    equipment,
    originalEquipment,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading: entityLoader.isLoading || isLoadingEquipment,
    isInitialized: isInitialized,
    error: error,
    hasChanges: currentHasChanges,
    
    // –ú–µ—Ç–æ–¥—ã
    loadEquipment,
    updateEquipment,
    resetEquipment,
    setEquipment,
    setOriginalEquipment,
    initializeNewEquipment,
    clearError: () => {
      entityLoader.clearError();
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  };
}; 
