// src/pages/Assets/Equipment/services/testDataGenerator.ts

import { testDataConfig } from '../config/testDataAIScript';
import { EquipmentData } from '../hooks/useEquipmentEdit';
import { AIDataGeneratorService, AIGeneratorOptions } from '../../../../services/AIDataGeneratorService';

export interface TestDataGeneratorOptions extends AIGeneratorOptions {}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∏
 */
export class TestDataGeneratorService {
  private aiGenerator: AIDataGeneratorService;
  private onStatusChange?: (status: string) => void;
  private onError?: (error: string) => void;

  constructor(options: TestDataGeneratorOptions = {}) {
    this.onStatusChange = options.onStatusChange;
    this.onError = options.onError;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    this.aiGenerator = new AIDataGeneratorService({
      apiBaseUrl: options.apiBaseUrl,
      onStatusChange: this.onStatusChange,
      onError: this.onError
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
   * @returns —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
   */
  async generateEquipmentData(): Promise<Partial<EquipmentData>> {
    console.log('üéØ TestDataGenerator: –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∏...');

    this.updateStatus('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏...');

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
      const generatedData = await this.aiGenerator.generateData(testDataConfig.equipment);
      
      if (generatedData.length === 0) {
        throw new Error('AI –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ');
      }

      const aiData = generatedData[0];
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ (AI + –Ω–∞—à–∏ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è)
      const equipmentData: Partial<EquipmentData> = {
        // –î–∞–Ω–Ω—ã–µ –æ—Ç AI
        name: aiData.name,
        equipment_code: aiData.equipment_code,
        subcategory: aiData.subcategory,
        manufacturer: aiData.manufacturer,
        model: aiData.model,
        country_origin: aiData.country_origin,
        description: aiData.description,
        
        // –ß–∏—Å–ª–æ–≤—ã–µ –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–∏
        category: this.getRandomCategory(),
        fuel_type: this.getRandomFuelType(),
        season_usage: this.getRandomSeasonUsage(),
        engine_power: this.getRandomEnginePower(),
        engine_volume: this.getRandomEngineVolume(),
        fuel_consumption: this.getRandomFuelConsumption(),
        working_width: this.getRandomWorkingWidth(),
        working_speed_min: this.getRandomWorkingSpeedMin(),
        working_speed_max: this.getRandomWorkingSpeedMax(),
        capacity: this.getRandomCapacity(),
        length_mm: this.getRandomLength(),
        width_mm: this.getRandomWidth(),
        height_mm: this.getRandomHeight(),
        weight_kg: this.getRandomWeight(),
        purchase_price: this.getRandomPurchasePrice(),
        depreciation_period_years: this.getRandomDepreciationPeriod(),
        maintenance_cost_per_hour: this.getRandomMaintenanceCost(),
        min_field_size: this.getRandomMinFieldSize(),
        suitable_crops: this.getRandomSuitableCrops(),
        specifications: this.getRandomSpecifications(),
        attachments: this.getRandomAttachments(),
        certifications: this.getRandomCertifications(),
        is_active: true
      };

      this.updateStatus('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      console.log('‚úÖ TestDataGenerator: –î–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');

      return equipmentData;

    } catch (err) {
      const errorMessage = `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∏: ${err}`;
      this.handleError(errorMessage);
      throw new Error(errorMessage);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  private getRandomCategory(): string {
    const categories = ['–ø–æ—á–≤–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞', '–ø–æ—Å–µ–≤', '—É–±–æ—Ä–∫–∞', '–∑–∞—â–∏—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '–≤–Ω–µ—Å–µ–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏–π', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–∑–∞–≥–æ—Ç–æ–≤–∫–∞ –∫–æ—Ä–º–æ–≤', '–¥—Ä—É–≥–æ–µ'];
    return categories[Math.floor(Math.random() * categories.length)];
  }

  private getRandomFuelType(): string {
    const fuelTypes = ['–¥–∏–∑–µ–ª—å', '–±–µ–Ω–∑–∏–Ω', '–≥–∞–∑', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '–≥–∏–±—Ä–∏–¥'];
    return fuelTypes[Math.floor(Math.random() * fuelTypes.length)];
  }

  private getRandomSeasonUsage(): string {
    const seasons = ['–≤–µ—Å–Ω–∞', '–ª–µ—Ç–æ', '–æ—Å–µ–Ω—å', '–∑–∏–º–∞', '–∫—Ä—É–≥–ª—ã–π –≥–æ–¥'];
    return seasons[Math.floor(Math.random() * seasons.length)];
  }

  private getRandomEnginePower(): number {
    return Math.round((Math.random() * 400 + 50) * 100) / 100; // 50-450 –ª.—Å.
  }

  private getRandomEngineVolume(): number {
    return Math.round((Math.random() * 15 + 2) * 100) / 100; // 2-17 –ª
  }

  private getRandomFuelConsumption(): number {
    return Math.round((Math.random() * 25 + 5) * 100) / 100; // 5-30 –ª/—á
  }

  private getRandomWorkingWidth(): number {
    return Math.round((Math.random() * 12 + 1) * 100) / 100; // 1-13 –º
  }

  private getRandomWorkingSpeedMin(): number {
    return Math.round((Math.random() * 8 + 2) * 100) / 100; // 2-10 –∫–º/—á
  }

  private getRandomWorkingSpeedMax(): number {
    const min = this.getRandomWorkingSpeedMin();
    return Math.round((min + Math.random() * 15 + 5) * 100) / 100; // min + 5-20 –∫–º/—á
  }

  private getRandomCapacity(): number {
    return Math.round((Math.random() * 20 + 2) * 100) / 100; // 2-22 –≥–∞/—á
  }

  private getRandomLength(): number {
    return Math.floor(Math.random() * 8000 + 2000); // 2000-10000 –º–º
  }

  private getRandomWidth(): number {
    return Math.floor(Math.random() * 5000 + 1500); // 1500-6500 –º–º
  }

  private getRandomHeight(): number {
    return Math.floor(Math.random() * 3000 + 1000); // 1000-4000 –º–º
  }

  private getRandomWeight(): number {
    return Math.floor(Math.random() * 15000 + 1000); // 1000-16000 –∫–≥
  }

  private getRandomPurchasePrice(): number {
    return Math.round((Math.random() * 8000000 + 500000) * 100) / 100; // 500,000-8,500,000 —Ä—É–±
  }

  private getRandomDepreciationPeriod(): number {
    return Math.floor(Math.random() * 15) + 5; // 5-20 –ª–µ—Ç
  }

  private getRandomMaintenanceCost(): number {
    return Math.round((Math.random() * 2000 + 200) * 100) / 100; // 200-2200 —Ä—É–±/—á
  }

  private getRandomMinFieldSize(): number {
    return Math.round((Math.random() * 50 + 5) * 100) / 100; // 5-55 –≥–∞
  }

  private getRandomSuitableCrops(): string[] {
    const crops = ['–ø—à–µ–Ω–∏—Ü–∞', '—è—á–º–µ–Ω—å', '–æ–≤–µ—Å', '—Ä–æ–∂—å', '–∫—É–∫—É—Ä—É–∑–∞', '–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫', '—Å–æ—è', '—Ä–∞–ø—Å', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '—Å–≤–µ–∫–ª–∞'];
    return this.getRandomArrayItems(crops, Math.floor(Math.random() * 4) + 2);
  }

  private getRandomSpecifications(): any {
    return {
      hydraulic_system: {
        pump_capacity: Math.round((Math.random() * 100 + 50) * 100) / 100,
        working_pressure: Math.floor(Math.random() * 200 + 150)
      },
      electronics: {
        gps_ready: Math.random() > 0.5,
        display_type: ['LCD', 'LED', 'OLED'][Math.floor(Math.random() * 3)],
        auto_steering: Math.random() > 0.7
      },
      transmission: {
        type: ['–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è', '–≥–∏–¥—Ä–æ—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è', '–≤–∞—Ä–∏–∞—Ç–æ—Ä–Ω–∞—è'][Math.floor(Math.random() * 3)],
        gears_count: Math.floor(Math.random() * 20) + 8
      }
    };
  }

  private getRandomAttachments(): any {
    return {
      included: this.getRandomArrayItems(['–æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–º–∞', '–≥–∏–¥—Ä–æ—Ü–∏–ª–∏–Ω–¥—Ä—ã', '—Ä–∞–±–æ—á–∏–µ –æ—Ä–≥–∞–Ω—ã'], 2),
      optional: this.getRandomArrayItems(['GPS-–Ω–∞–≤–∏–≥–∞—Ü–∏—è', '—Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–≤–æ–∂–¥–µ–Ω–∏—è', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ'], 1),
      compatible: this.getRandomArrayItems(['—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–æ–≥—Ä—É–∑—á–∏–∫', '–∫—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä', '–±–æ—Ä–æ–Ω–∞'], 1)
    };
  }

  private getRandomCertifications(): string[] {
    const certs = ['CE', 'ISO_9001', 'GOST', 'EPA', 'Stage_V', 'OECD'];
    return this.getRandomArrayItems(certs, Math.floor(Math.random() * 3) + 1);
  }

  private getRandomArrayItems<T>(array: T[], count: number): T[] {
    const shuffled = [...array].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, Math.min(count, array.length));
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private updateStatus(status: string): void {
    if (this.onStatusChange) {
      this.onStatusChange(status);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
   */
  private handleError(error: string): void {
    console.error('‚ùå TestDataGenerator:', error);
    if (this.onError) {
      this.onError(error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ö—É–∫–∞—Ö
export const createTestDataGenerator = (options?: TestDataGeneratorOptions): TestDataGeneratorService => {
  return new TestDataGeneratorService(options);
};

export const generateTestData = async (apiBaseUrl?: string): Promise<Partial<EquipmentData>> => {
  const generator = createTestDataGenerator({ apiBaseUrl });
  return generator.generateEquipmentData();
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
export const TestDataGeneratorUtils = {
  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∏
   */
  validateEquipmentData: (equipment: any): equipment is EquipmentData => {
    return equipment && 
           typeof equipment.name === 'string' &&
           typeof equipment.category === 'string';
  },

  /**
   * –°–æ–∑–¥–∞–µ—Ç mock –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
   */
  createMockEquipment: (id: number, name: string): Partial<EquipmentData> => ({
    id,
    name,
    category: '–ø–æ—á–≤–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞',
    engine_power: 100 + id,
    is_active: true
  })
}; 
