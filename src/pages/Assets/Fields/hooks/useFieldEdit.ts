// src/pages/Assets/Fields/hooks/useFieldEdit.ts

import { useCallback } from 'react';
import { useFieldData } from './useFieldData';
import { useSaveField } from './useSaveField';
import { useTestDataGeneration } from './useTestDataGeneration';
import { useValidationErrorHandler } from '../../../../hooks/useValidationErrorHandler';
import { useSyncData } from '../../../../hooks/useSyncData';
import { fieldsSyncConfig } from '../config/syncConfig';
import {DEFAULT_API_BASE_URL} from '../../../../dataSync/index';

// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—è
export interface FieldData {
  id?: number;
  field_name: string;
  field_code?: string;
  area_hectares: number;
  soil_type: string;
  soil_quality_score?: number;
  irrigation_type?: string;
  field_status?: string;
  location?: any;
  boundaries?: any;
  soil_analysis?: any;
  terrain_features?: any;
  infrastructure?: any;
  cadastral_number?: string;
  ownership_documents?: any;
  restrictions?: any;
  special_features?: any;
  usage_history?: any;
  notes?: string;
  is_active?: boolean;
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
}

export interface UseFieldEditReturn {
  // –î–∞–Ω–Ω—ã–µ
  field: FieldData | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean;
  hasChanges: boolean;
  error: string | null;
  isSaving: boolean;
  isGenerating: boolean;
  saveErrorData: any;
  
  // –ú–µ—Ç–æ–¥—ã
  updateField: (updates: Partial<FieldData>) => void;
  saveChanges: () => Promise<boolean>;
  resetField: () => void;
  generateTestData: () => Promise<void>;
  clearError: () => void;
  clearSaveError: () => void;
  handleSuccess: (message: string) => void;
}

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
 */
export const useFieldEdit = (fieldId?: number): UseFieldEditReturn => {
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  const { 
    isInitialized, 
    isLoading: syncLoading, 
    sync: performSyncOriginal 
  } = useSyncData(fieldsSyncConfig, {
    autoInitialize: true,
    autoSync: false
  });

  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º sync –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
  const performSync = useCallback(async (): Promise<void> => {
    await performSyncOriginal();
  }, [performSyncOriginal]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const {
    localError,
    saveErrorData,
    setLocalError,
    clearError: clearLocalError,
    clearSaveError,
    handleSaveError
  } = useValidationErrorHandler();

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è
  const {
    field,
    isLoading: dataLoading,
    hasChanges,
    error: dataError,
    updateField,
    resetField,
    clearError: clearDataError
  } = useFieldData(fieldId, handleSaveError);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—è
  const { isSaving, saveChanges: saveField } = useSaveField();

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const { isGenerating, generateTestData: generateTestDataAction } = useTestDataGeneration(
    {
      apiBaseUrl: DEFAULT_API_BASE_URL,
      onDataGenerated: (data) => {
        console.log('üéØ –ü–æ–ª—É—á–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è:', data);
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        updateField(data);
      },
      onError: handleSaveError,
      onStatusChange: (status) => {
        console.log('üìä –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', status);
      }
    },
    {
      isInitialized,
      syncLoading,
      performSync
    }
  );

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  const isLoading = dataLoading || syncLoading;
  const error = localError || dataError;

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSON —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSONB –ø–æ–ª–µ–π
  const prepareDataForSave = useCallback((data: FieldData): FieldData => {
    const prepared = { ...data };
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ JSON —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSONB –ø–æ–ª–µ–π
    if (prepared.location && typeof prepared.location === 'object') {
      prepared.location = JSON.stringify(prepared.location);
    }
    if (prepared.boundaries && typeof prepared.boundaries === 'object') {
      prepared.boundaries = JSON.stringify(prepared.boundaries);
    }
    if (prepared.soil_analysis && typeof prepared.soil_analysis === 'object') {
      prepared.soil_analysis = JSON.stringify(prepared.soil_analysis);
    }
    if (prepared.terrain_features && typeof prepared.terrain_features === 'object') {
      prepared.terrain_features = JSON.stringify(prepared.terrain_features);
    }
    if (prepared.infrastructure && typeof prepared.infrastructure === 'object') {
      prepared.infrastructure = JSON.stringify(prepared.infrastructure);
    }
    if (prepared.ownership_documents && typeof prepared.ownership_documents === 'object') {
      prepared.ownership_documents = JSON.stringify(prepared.ownership_documents);
    }
    if (prepared.restrictions && typeof prepared.restrictions === 'object') {
      prepared.restrictions = JSON.stringify(prepared.restrictions);
    }
    if (prepared.special_features && typeof prepared.special_features === 'object') {
      prepared.special_features = JSON.stringify(prepared.special_features);
    }
    if (prepared.usage_history && typeof prepared.usage_history === 'object') {
      prepared.usage_history = JSON.stringify(prepared.usage_history);
    }
    
    return prepared;
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveChanges = useCallback(async (): Promise<boolean> => {
    if (!field) {
      const errorMsg = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
      console.error('‚ùå', errorMsg);
      setLocalError(errorMsg);
      return false;
    }

    try {
      console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—è:', field.field_name);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ JSON)
      const preparedData = prepareDataForSave(field);
      console.log('üîß –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', preparedData);
      
      const success = await saveField(preparedData);
      
      if (success) {
        console.log('‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        return true;
      } else {
        console.log('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—è –Ω–µ —É–¥–∞–ª–æ—Å—å');
        return false;
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—è:', error);
      handleSaveError(error);
      return false;
    }
  }, [field, prepareDataForSave, saveField, setLocalError, handleSaveError]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const generateTestData = useCallback(async () => {
    try {
      console.log('üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è...');
      await generateTestDataAction();
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—è:', error);
      handleSaveError(error);
    }
  }, [generateTestDataAction, handleSaveError]);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const clearError = useCallback(() => {
    clearLocalError();
    clearDataError();
  }, [clearLocalError, clearDataError]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const handleSuccess = useCallback((message: string) => {
    console.log('üéâ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:', message);
    clearError();
  }, [clearError]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    field,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    hasChanges,
    error,
    isSaving,
    isGenerating,
    saveErrorData,
    
    // –ú–µ—Ç–æ–¥—ã
    updateField,
    saveChanges,
    resetField,
    generateTestData,
    clearError,
    clearSaveError,
    handleSuccess
  };
}; 
