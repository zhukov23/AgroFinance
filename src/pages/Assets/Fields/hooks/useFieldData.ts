// src/pages/Assets/Fields/hooks/useFieldData.ts

import { useState, useEffect, useCallback } from 'react';
import { useEntityLoader } from '../../../../hooks/useEntityLoader';
import { useSyncData } from '../../../../hooks/useSyncData';
import { fieldsSyncConfig } from '../config/syncConfig';
import { FieldData } from './useFieldEdit';
import { hasChanges } from '../../../../utils/validation.utils';

export interface UseFieldDataReturn {
  // –î–∞–Ω–Ω—ã–µ
  field: FieldData | null;
  originalField: FieldData | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean;
  isInitialized: boolean;
  error: string | null;
  hasChanges: boolean;
  
  // –ú–µ—Ç–æ–¥—ã
  loadField: (id: number) => Promise<void>;
  updateField: (updates: Partial<FieldData>) => void;
  resetField: () => void;
  setField: (field: FieldData | null) => void;
  setOriginalField: (field: FieldData | null) => void;
  initializeNewField: () => void;
  clearError: () => void;
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–µ–π
 */
export const useFieldData = (
  fieldId?: number,
  errorHandler?: (error: any) => void
): UseFieldDataReturn => {
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è
  const [field, setField] = useState<FieldData | null>(null);
  const [originalField, setOriginalField] = useState<FieldData | null>(null);
  const [isLoadingField, setIsLoadingField] = useState(false);
  const [loadAttempts, setLoadAttempts] = useState(0);
  const MAX_LOAD_ATTEMPTS = 3;

  // –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const {
    isInitialized,
    loadTableData,
    sync,
    error: syncError
  } = useSyncData(fieldsSyncConfig, {
    autoInitialize: true,
    autoSync: false
  });

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const entityLoader = useEntityLoader<FieldData>(
    {
      syncConfig: fieldsSyncConfig,
      entityTableName: 'assets_fields',
      relatedTableNames: []
    },
    useSyncData,
    errorHandler || (() => {})
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const currentHasChanges = hasChanges(field, originalField);

  // –û–±—â–∞—è –æ—à–∏–±–∫–∞
  const error = syncError || entityLoader.error;

  // –°–±—Ä–æ—Å –ø—Ä–∏ —Å–º–µ–Ω–µ ID
  useEffect(() => {
    setLoadAttempts(0);
    setField(null);
    setOriginalField(null);
  }, [fieldId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—è –ø–æ ID
  const loadField = useCallback(async (id: number) => {
    if (isLoadingField) {
      console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–µ ID: ${id}`);
    setIsLoadingField(true);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const allFields = await loadTableData('assets_fields');
      console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${allFields.length}`);
      
      if (allFields.length === 0) {
        console.log('üì• –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
        await sync();
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const fieldsAfterSync = await loadTableData('assets_fields');
        console.log(`üìä –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ–π: ${fieldsAfterSync.length}`);
      }
      
      // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ
      const foundField = allFields.find((item: any) => item.id === id);
      
      if (foundField) {
        setField(foundField);
        setOriginalField(foundField);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª–µ: ${foundField.field_name}`);
      } else {
        console.log(`‚ùå –ü–æ–ª–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ ${allFields.length} –∑–∞–ø–∏—Å–µ–π`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const availableIds = allFields.map((item: any) => item.id).slice(0, 10);
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –ø–æ–ª–µ–π: ${availableIds.join(', ')}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—è:', error);
      if (errorHandler) {
        errorHandler(error);
      }
    } finally {
      setIsLoadingField(false);
    }
  }, [isLoadingField, loadTableData, sync, errorHandler]);

  // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
  useEffect(() => {
    if (!fieldId && !field && isInitialized) {
      initializeNewField();
    }
  }, [fieldId, isInitialized]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (fieldId && isInitialized && !field && !isLoadingField && loadAttempts < MAX_LOAD_ATTEMPTS) {
      setLoadAttempts(prev => prev + 1);
      loadField(fieldId);
    }
  }, [fieldId, isInitialized, field, isLoadingField, loadAttempts]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
  const initializeNewField = useCallback(() => {
    const newField: FieldData = {
      id: 0,
      field_name: '',
      area_hectares: 0,
      soil_type: '',
      is_active: true
    };
    
    setField(newField);
    setOriginalField(newField);
    console.log('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ');
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è
  const updateField = useCallback((updates: Partial<FieldData>) => {
    setField(prev => {
      if (!prev) return null;
      return { ...prev, ...updates };
    });
  }, []);

  // –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const resetField = useCallback(() => {
    if (originalField) {
      setField({ ...originalField });
      console.log('üîÑ –°–±—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è');
    }
  }, [originalField]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    field,
    originalField,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading: entityLoader.isLoading || isLoadingField,
    isInitialized: isInitialized,
    error: error,
    hasChanges: currentHasChanges,
    
    // –ú–µ—Ç–æ–¥—ã
    loadField,
    updateField,
    resetField,
    setField,
    setOriginalField,
    initializeNewField,
    clearError: () => {
      entityLoader.clearError();
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  };
}; 
