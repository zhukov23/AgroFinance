import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardBody, CardHeader, Col, Container, Row, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';
import classnames from "classnames";
import { ErrorToast } from '../../../components/Common/MessageToast/ErrorToast';
import { SuccessToast } from '../../../components/Common/MessageToast/SuccessToast';
import { EntityEditActions } from '../../../components/Common/DataManagement/EntityEditActions';
import { useFieldEdit } from './hooks/useFieldEdit';
import BasicInfoTab from './components/BasicInfoTab';
import RequisitesTab from './components/RequisitesTab';
import AdditionalTab from './components/AdditionalTab';

const FieldEdit = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const [activeTab, setActiveTab] = useState("1");
    
    const fieldId = id === 'new' ? undefined : (id ? parseInt(id) : undefined);
    const isNewField = id === 'new';
    
    const {
        field,
        isLoading,
        hasChanges,
        error,
        isSaving,
        isGenerating,
        updateField,
        saveChanges,
        resetField,
        generateTestData,
        clearError,
        saveErrorData,
        clearSaveError,
        handleSuccess
    } = useFieldEdit(fieldId);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–æ–≤
    const [validationErrors, setValidationErrors] = useState<{[key: string]: string}>({});
    const [tabsWithErrors, setTabsWithErrors] = useState<{[key: string]: boolean}>({});

    useEffect(() => {
        console.log('üîç saveErrorData –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', saveErrorData);
    }, [saveErrorData]);

    document.title = isNewField 
        ? "–ù–æ–≤–æ–µ –ø–æ–ª–µ | –ê–≥—Ä–æ –ü–û"
        : `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${field?.field_name || '–ü–æ–ª–µ'} | –ê–≥—Ä–æ –ü–û`;

    const tabChange = (tab: string) => {
        if (activeTab !== tab) setActiveTab(tab);
    };

    const [successToast, setSuccessToast] = useState<{
        message: string;
        details?: string;
        isVisible: boolean;
    } | null>(null);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    const validateAllFields = () => {
        const errors: {[key: string]: string} = {};
        const tabErrors: {[key: string]: boolean} = {};

        if (!field) {
            errors.general = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏';
            return { errors, tabErrors };
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–¢–∞–± 1 - –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        if (!field.field_name?.trim()) {
            errors.field_name = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
            tabErrors['1'] = true;
        }

        if (!field.area_hectares || field.area_hectares <= 0) {
            errors.area_hectares = '–ü–ª–æ—â–∞–¥—å –ø–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
            tabErrors['1'] = true;
        }

        if (!field.soil_type) {
            errors.soil_type = '–¢–∏–ø –ø–æ—á–≤—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
            tabErrors['1'] = true;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–ª—è
        if (field.field_code && !/^[A-Za-z0-9\-_]*$/.test(field.field_code)) {
            errors.field_code = '–ö–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è';
            tabErrors['1'] = true;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        if (field.cadastral_number && !/^\d{2}:\d{2}:\d{7}:\d{1,4}$/.test(field.cadastral_number)) {
            errors.cadastral_number = '–§–æ—Ä–º–∞—Ç: XX:XX:XXXXXXX:XXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50:21:0010305:44)';
            tabErrors['1'] = true;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—á–≤—ã
        if (field.soil_quality_score !== undefined && field.soil_quality_score !== null) {
            if (field.soil_quality_score < 1 || field.soil_quality_score > 10) {
                errors.soil_quality_score = '–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ—á–≤—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10';
                tabErrors['2'] = true;
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ location
        if (field.location && typeof field.location === 'object') {
            const { lat, lng } = field.location;
            if (lat !== undefined && (lat < -90 || lat > 90)) {
                errors.location_lat = '–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90';
                tabErrors['2'] = true;
            }
            if (lng !== undefined && (lng < -180 || lng > 180)) {
                errors.location_lng = '–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180';
                tabErrors['2'] = true;
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è pH –≤ soil_analysis
        if (field.soil_analysis && typeof field.soil_analysis === 'object') {
            const { ph } = field.soil_analysis;
            if (ph !== undefined && (ph < 0 || ph > 14)) {
                errors.soil_ph = 'pH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 14';
                tabErrors['2'] = true;
            }
        }

        return { errors, tabErrors };
    };

    const handleSave = async () => {
        console.log('üîÑ handleSave –≤—ã–∑–≤–∞–Ω');
        
        // –ü—Ä–æ–≤–æ–¥–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        const { errors, tabErrors } = validateAllFields();
        setValidationErrors(errors);
        setTabsWithErrors(tabErrors);

        if (Object.keys(errors).length > 0) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            const errorMessages = Object.entries(errors).map(([field, message]) => message);
            const tabsWithErrorsList = Object.keys(tabErrors).map(tabId => {
                const tabNames: {[key: string]: string} = {
                    '1': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                    '2': '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
                    '3': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
                };
                return tabNames[tabId] || `–¢–∞–± ${tabId}`;
            });

            console.log('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors);
            setSuccessToast({
                message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–∞—Ö: ${tabsWithErrorsList.join(', ')}. ${errorMessages.join('. ')}`,
                isVisible: true
            });
            return;
        }

        try {
            console.log('üì§ –í—ã–∑—ã–≤–∞–µ–º saveChanges...');
            const success = await saveChanges();
            
            if (success) {
                console.log('üéâ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
                // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                setValidationErrors({});
                setTabsWithErrors({});
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                setSuccessToast({
                    message: '–ü–æ–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
                    details: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
                    isVisible: true
                });
            } else {
                console.log('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
            }
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –≤ handleSave:', error);
        }
    };

    const handleCancel = () => {
        if (hasChanges) {
            if (window.confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                navigate('/assets/fields');
            }
        } else {
            navigate('/assets/fields');
        }
    };

    if (isLoading) {
        return (
            <div className="page-content">
                <Container fluid>
                    <div className="text-center p-5">
                        <div className="spinner-border text-primary" role="status">
                            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        </div>
                        <p className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—è...</p>
                    </div>
                </Container>
                
                <ErrorToast 
                    errorData={saveErrorData} 
                    onClose={clearSaveError} 
                />
            </div>
        );
    }

    return (
        <React.Fragment>
            <div className="page-content">
                <Container fluid>
                    {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <Row>
                        <Col>
                            <div className="page-title-box d-sm-flex align-items-center justify-content-between">
                                <h4 className="mb-sm-0">
                                    {isNewField ? '–ù–æ–≤–æ–µ –ø–æ–ª–µ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è'}
                                </h4>
                                <div className="page-title-right">
                                    <ol className="breadcrumb m-0">
                                        <li className="breadcrumb-item">
                                            <a href="#" onClick={() => navigate('/assets/fields')}>
                                                –ü–æ–ª—è
                                            </a>
                                        </li>
                                        <li className="breadcrumb-item active">
                                            {isNewField ? '–°–æ–∑–¥–∞–Ω–∏–µ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'}
                                        </li>
                                    </ol>
                                </div>
                            </div>
                        </Col>
                    </Row>

                    {/* –û—à–∏–±–∫–∏ */}
                    {error && (
                        <Row>
                            <Col>
                                <div className="alert alert-danger d-flex align-items-center" role="alert">
                                    <i className="ri-error-warning-line me-2"></i>
                                    <div>
                                        <strong>–û—à–∏–±–∫–∞:</strong> {error}
                                        <button className="btn btn-sm btn-outline-danger ms-2" onClick={clearError}>
                                            –ó–∞–∫—Ä—ã—Ç—å
                                        </button>
                                    </div>
                                </div>
                            </Col>
                        </Row>
                    )}

                    <Row>
                        <Col>
                            <Card>
                                <CardHeader>
                                    <Nav className="nav-tabs-custom rounded card-header-tabs border-bottom-0" role="tablist">
                                        <NavItem>
                                            <NavLink
                                                className={classnames({ 
                                                    active: activeTab === "1",
                                                    'text-danger': tabsWithErrors['1']
                                                })}
                                                onClick={() => tabChange("1")}>
                                                <i className="ri-map-line"></i>
                                                –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                                {tabsWithErrors['1'] && <i className="ri-error-warning-line ms-1 text-danger"></i>}
                                            </NavLink>
                                        </NavItem>
                                        <NavItem>
                                            <NavLink
                                                className={classnames({ 
                                                    active: activeTab === "2",
                                                    'text-danger': tabsWithErrors['2']
                                                })}
                                                onClick={() => tabChange("2")}>
                                                <i className="ri-landscape-line"></i>
                                                –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                                                {tabsWithErrors['2'] && <i className="ri-error-warning-line ms-1 text-danger"></i>}
                                            </NavLink>
                                        </NavItem>
                                        <NavItem>
                                            <NavLink
                                                className={classnames({ 
                                                    active: activeTab === "3",
                                                    'text-danger': tabsWithErrors['3']
                                                })}
                                                onClick={() => tabChange("3")}>
                                                <i className="ri-star-line"></i>
                                                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                                                {tabsWithErrors['3'] && <i className="ri-error-warning-line ms-1 text-danger"></i>}
                                            </NavLink>
                                        </NavItem>
                                    </Nav>
                                </CardHeader>
                                
                                <CardBody className="p-4">
                                    <TabContent activeTab={activeTab}>
                                        <TabPane tabId="1">
                                            <BasicInfoTab
                                                field={field}
                                                updateField={updateField}
                                                validationErrors={validationErrors}
                                            />
                                        </TabPane>
                                        <TabPane tabId="2">
                                            <RequisitesTab
                                                field={field}
                                                updateField={updateField}
                                                validationErrors={validationErrors}
                                            />
                                        </TabPane>
                                        <TabPane tabId="3">
                                            <AdditionalTab
                                                field={field}
                                                updateField={updateField}
                                                validationErrors={validationErrors}
                                            />
                                        </TabPane>
                                    </TabContent>
                                    
                                    {/* –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                                    <Row>
                                        <Col lg={12}>
                                            <EntityEditActions
                                                onSave={handleSave}
                                                isSaving={isSaving}
                                                hasChanges={hasChanges}
                                                onReset={resetField}
                                                onGenerateTestData={generateTestData}
                                                isGenerating={isGenerating}
                                                onCancel={handleCancel}
                                                disabled={isLoading}
                                            />
                                        </Col>
                                    </Row>
                                </CardBody>
                            </Card>
                        </Col>
                    </Row>
                </Container>
            </div>
            
            <ErrorToast 
                errorData={saveErrorData} 
                onClose={clearSaveError} 
            />
            <SuccessToast 
                message={successToast?.message || ''}
                details={successToast?.details}
                isVisible={successToast?.isVisible || false}
                onClose={() => setSuccessToast(null)}
            />
        </React.Fragment>
    );
};

export default FieldEdit; 
