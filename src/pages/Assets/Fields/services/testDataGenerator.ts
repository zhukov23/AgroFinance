// src/pages/Assets/Fields/services/testDataGenerator.ts

import { testDataConfig } from '../config/testDataAIScript';
import { FieldData } from '../hooks/useFieldEdit';
import { AIDataGeneratorService, AIGeneratorOptions } from '../../../../services/AIDataGeneratorService';

export interface TestDataGeneratorOptions extends AIGeneratorOptions {}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
 */
export class TestDataGeneratorService {
  private aiGenerator: AIDataGeneratorService;
  private onStatusChange?: (status: string) => void;
  private onError?: (error: string) => void;

  constructor(options: TestDataGeneratorOptions = {}) {
    this.onStatusChange = options.onStatusChange;
    this.onError = options.onError;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    this.aiGenerator = new AIDataGeneratorService({
      apiBaseUrl: options.apiBaseUrl,
      onStatusChange: this.onStatusChange,
      onError: this.onError
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
   * @returns —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
   */
  async generateFieldData(): Promise<Partial<FieldData>> {
    console.log('üéØ TestDataGenerator: –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—è...');

    this.updateStatus('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è...');

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
      const generatedData = await this.aiGenerator.generateData(testDataConfig.field);
      
      if (generatedData.length === 0) {
        throw new Error('AI –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ');
      }

      const aiData = generatedData[0];
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è (AI + –Ω–∞—à–∏ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è)
      const fieldData: Partial<FieldData> = {
        // –î–∞–Ω–Ω—ã–µ –æ—Ç AI
        field_name: aiData.field_name,
        field_code: aiData.field_code,
        cadastral_number: aiData.cadastral_number,
        notes: aiData.notes,
        
        // –ß–∏—Å–ª–æ–≤—ã–µ –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–∏
        area_hectares: this.getRandomArea(),
        soil_type: this.getRandomSoilType(),
        soil_quality_score: this.getRandomSoilQuality(),
        irrigation_type: this.getRandomIrrigationType(),
        field_status: this.getRandomFieldStatus(),
        location: this.getRandomLocation(),
        boundaries: this.getRandomBoundaries(),
        soil_analysis: this.getRandomSoilAnalysis(),
        terrain_features: this.getRandomTerrainFeatures(),
        infrastructure: this.getRandomInfrastructure(),
        ownership_documents: this.getRandomOwnershipDocuments(),
        restrictions: this.getRandomRestrictions(),
        special_features: this.getRandomSpecialFeatures(),
        usage_history: this.getRandomUsageHistory(),
        is_active: true
      };

      this.updateStatus('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      console.log('‚úÖ TestDataGenerator: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');

      return fieldData;

    } catch (err) {
      const errorMessage = `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—è: ${err}`;
      this.handleError(errorMessage);
      throw new Error(errorMessage);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  private getRandomArea(): number {
    return Math.round((Math.random() * 500 + 10) * 10000) / 10000; // 10-510 –≥–∞
  }

private getRandomSoilType(): string {
  const soilTypes = ['—á–µ—Ä–Ω–æ–∑–µ–º', '—Å—É–≥–ª–∏–Ω–æ–∫', '—Å—É–ø–µ—Å—å', '–ø–µ—Å—á–∞–Ω–∞—è', '–≥–ª–∏–Ω–∏—Å—Ç–∞—è', '—Ç–æ—Ä—Ñ—è–Ω–∞—è', '–¥—Ä—É–≥–∞—è'];
  return soilTypes[Math.floor(Math.random() * soilTypes.length)];
}

private getRandomIrrigationType(): string {
  const irrigationTypes = ['–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–∫–∞–ø–µ–ª—å–Ω–æ–µ', '–¥–æ–∂–¥–µ–≤–∞–Ω–∏–µ', '–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ', '–ø–æ–¥–ø–æ—á–≤–µ–Ω–Ω–æ–µ'];
  return irrigationTypes[Math.floor(Math.random() * irrigationTypes.length)];
}

private getRandomFieldStatus(): string {
  const statuses = ['–∞–∫—Ç–∏–≤–Ω–æ–µ', '–ø–æ–¥_–ø–∞—Ä–æ–º', '–≤_—Å–µ–≤–æ–æ–±–æ—Ä–æ—Ç–µ', '–≤—Ä–µ–º–µ–Ω–Ω–æ_–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ', '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞_–∫_–æ–±—Ä–∞–±–æ—Ç–∫–µ'];
  return statuses[Math.floor(Math.random() * statuses.length)];
}
  private getRandomSoilQuality(): number {
    return Math.floor(Math.random() * 10) + 1; // 1-10
  }


  private getRandomLocation(): any {
    const lat = 55.7558 + (Math.random() - 0.5) * 2; // –ü—Ä–∏–º–µ—Ä–Ω–æ –ú–æ—Å–∫–≤–∞ ¬±1¬∞
    const lng = 37.6176 + (Math.random() - 0.5) * 2;
    
    return {
      lat: Math.round(lat * 1000000) / 1000000,
      lng: Math.round(lng * 1000000) / 1000000,
      address: `–ü–æ–ª–µ –≤ ${Math.floor(Math.random() * 50 + 10)} –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞`
    };
  }

  private getRandomBoundaries(): any {
    const centerLat = 55.7558 + (Math.random() - 0.5) * 2;
    const centerLng = 37.6176 + (Math.random() - 0.5) * 2;
    const size = 0.01; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
    
    return {
      type: 'Polygon',
      coordinates: [[
        [centerLng - size, centerLat - size],
        [centerLng + size, centerLat - size],
        [centerLng + size, centerLat + size],
        [centerLng - size, centerLat + size],
        [centerLng - size, centerLat - size]
      ]]
    };
  }

  private getRandomSoilAnalysis(): any {
    return {
      ph: Math.round((Math.random() * 3 + 5.5) * 100) / 100, // 5.5-8.5
      humus: Math.round((Math.random() * 5 + 2) * 100) / 100, // 2-7%
      N: Math.floor(Math.random() * 100 + 80), // 80-180
      P: Math.floor(Math.random() * 80 + 40), // 40-120
      K: Math.floor(Math.random() * 120 + 100), // 100-220
      analysis_date: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
    };
  }

  private getRandomTerrainFeatures(): any {
    const reliefTypes = ['—Ä–∞–≤–Ω–∏–Ω–Ω—ã–π', '—Ö–æ–ª–º–∏—Å—Ç—ã–π', '—Å–∫–ª–æ–Ω', '–Ω–∏–∑–∏–Ω–∞', '–≤–æ–∑–≤—ã—à–µ–Ω–Ω–æ—Å—Ç—å'];
    const drainageTypes = ['—Ö–æ—Ä–æ—à–∏–π', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π', '–ø–ª–æ—Ö–æ–π', '–∑–∞–±–æ–ª–æ—á–µ–Ω–Ω—ã–π'];
    
    return {
      relief: reliefTypes[Math.floor(Math.random() * reliefTypes.length)],
      slope: Math.round(Math.random() * 15 * 100) / 100, // 0-15¬∞
      drainage: drainageTypes[Math.floor(Math.random() * drainageTypes.length)],
      elevation: Math.floor(Math.random() * 300 + 100) // 100-400 –º
    };
  }

  private getRandomInfrastructure(): any {
    const roadTypes = ['–∞—Å—Ñ–∞–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', '–≥—Ä—É–Ω—Ç–æ–≤–∞—è', '—â–µ–±–µ–Ω–æ—á–Ω–∞—è', '–ø–æ–ª–µ–≤–∞—è'];
    const waterSources = ['—Å–∫–≤–∞–∂–∏–Ω–∞', '–∫–æ–ª–æ–¥–µ—Ü', '—Ä–µ–∫–∞', '–ø—Ä—É–¥', '–≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥'];
    
    return {
      roads: this.getRandomArrayItems(roadTypes, Math.floor(Math.random() * 2) + 1),
      water_sources: this.getRandomArrayItems(waterSources, Math.floor(Math.random() * 2) + 1),
      power_lines: Math.random() > 0.6,
      storage_buildings: Math.random() > 0.7
    };
  }

  private getRandomOwnershipDocuments(): any {
    return {
      ownership_type: ['—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–∞—Ä–µ–Ω–¥–∞', '—Å—É–±–∞—Ä–µ–Ω–¥–∞'][Math.floor(Math.random() * 3)],
      registration_date: new Date(Date.now() - Math.random() * 10 * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      document_number: `${Math.floor(Math.random() * 90000 + 10000)}`,
      valid_until: Math.random() > 0.3 ? new Date(Date.now() + Math.random() * 10 * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] : null
    };
  }

  private getRandomRestrictions(): any {
    const restrictionTypes = ['—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ', '—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ', '–æ—Ö—Ä–∞–Ω–Ω—ã–µ_–∑–æ–Ω—ã', '–≤–æ–¥–æ–æ—Ö—Ä–∞–Ω–Ω—ã–µ', '–≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥'];
    
    if (Math.random() > 0.6) {
      return {
        types: this.getRandomArrayItems(restrictionTypes, Math.floor(Math.random() * 2) + 1),
        description: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É'
      };
    }
    
    return null;
  }

  private getRandomSpecialFeatures(): any {
    const features = ['—ç—Ä–æ–∑–∏—è', '–∑–∞–±–æ–ª–æ—á–µ–Ω–Ω–æ—Å—Ç—å', '–∫–∞–º–µ–Ω–∏—Å—Ç–æ—Å—Ç—å', '–±–ª–∏–∑–æ—Å—Ç—å_–≤–æ–¥—ã', '–≤–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–∞'];
    
    if (Math.random() > 0.5) {
      return {
        features: this.getRandomArrayItems(features, Math.floor(Math.random() * 2) + 1),
        severity: ['–Ω–∏–∑–∫–∞—è', '—Å—Ä–µ–¥–Ω—è—è', '–≤—ã—Å–æ–∫–∞—è'][Math.floor(Math.random() * 3)]
      };
    }
    
    return null;
  }

  private getRandomUsageHistory(): any {
    const crops = ['–ø—à–µ–Ω–∏—Ü–∞', '—è—á–º–µ–Ω—å', '–∫—É–∫—É—Ä—É–∑–∞', '–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫', '—Å–æ—è', '—Ä–∞–ø—Å', '–ø–∞—Ä'];
    const currentYear = new Date().getFullYear();
    
    return {
      recent_crops: this.getRandomArrayItems(crops, Math.floor(Math.random() * 3) + 1),
      years: [currentYear - 1, currentYear - 2, currentYear - 3],
      yield_history: {
        [currentYear - 1]: Math.round((Math.random() * 40 + 20) * 100) / 100,
        [currentYear - 2]: Math.round((Math.random() * 40 + 20) * 100) / 100,
        [currentYear - 3]: Math.round((Math.random() * 40 + 20) * 100) / 100
      }
    };
  }

  private getRandomArrayItems<T>(array: T[], count: number): T[] {
    const shuffled = [...array].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, Math.min(count, array.length));
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private updateStatus(status: string): void {
    if (this.onStatusChange) {
      this.onStatusChange(status);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
   */
  private handleError(error: string): void {
    console.error('‚ùå TestDataGenerator:', error);
    if (this.onError) {
      this.onError(error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ö—É–∫–∞—Ö
export const createTestDataGenerator = (options?: TestDataGeneratorOptions): TestDataGeneratorService => {
  return new TestDataGeneratorService(options);
};

export const generateTestData = async (apiBaseUrl?: string): Promise<Partial<FieldData>> => {
  const generator = createTestDataGenerator({ apiBaseUrl });
  return generator.generateFieldData();
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
export const TestDataGeneratorUtils = {
  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—è
   */
  validateFieldData: (field: any): field is FieldData => {
    return field && 
           typeof field.field_name === 'string' &&
           typeof field.area_hectares === 'number' &&
           typeof field.soil_type === 'string';
  },

  /**
   * –°–æ–∑–¥–∞–µ—Ç mock –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
   */
  createMockField: (id: number, name: string): Partial<FieldData> => ({
    id,
    field_name: name,
    area_hectares: 100 + id,
    soil_type: '—á–µ—Ä–Ω–æ–∑–µ–º',
    is_active: true
  })
}; 
