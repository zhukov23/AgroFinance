// src/pages/Inventory/HarvestedProducts/hooks/useHarvestedProductEdit.ts

import { useCallback } from 'react';
import { useHarvestedProductData } from './useHarvestedProductData';
import { useSaveHarvestedProduct } from './useSaveHarvestedProduct';
import { useTestDataGeneration } from './useTestDataGeneration';
import { useValidationErrorHandler } from '../../../../hooks/useValidationErrorHandler';
import { useSyncData } from '../../../../hooks/useSyncData';
import { harvestedProductsSyncConfig } from '../config/syncConfig';
import {DEFAULT_API_BASE_URL} from '../../../../dataSync/index';

// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
export interface HarvestedProductData {
  id?: number;
  planting_id?: number;
  product_name: string;
  planting_material_id?: number;
  harvest_date: string;
  field_name?: string;
  harvest_area?: number;
  quantity: number;
  moisture_content?: number;
  protein_content?: number;
  oil_content?: number;
  gluten_content?: number;
  sugar_content?: number;
  starch_content?: number;
  impurities?: number;
  damaged_grains?: number;
  test_weight?: number;
  quality_class?: string;
  grade?: string;
  storage_date?: string;
  storage_conditions?: string;
  production_cost?: number;
  production_cost_per_unit?: number;
  market_price_at_harvest?: number;
  current_market_price?: number;
  lab_analysis_date?: string;
  lab_certificate_number?: string;
  additional_indicators?: any;
  quantity_sold?: number;
  quantity_processed?: number;
  quantity_reserved?: number;
  quantity_damaged?: number;
  quantity_available?: number;
  harvest_conditions?: string;
  processing_recommendations?: string;
  status?: string;
  rating?: number;
  notes?: string;
  tags?: string[];
  is_active?: boolean;
  storage_location_id?: number;
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
}

export interface UseHarvestedProductEditReturn {
  // –î–∞–Ω–Ω—ã–µ
  harvestedProduct: HarvestedProductData | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean;
  hasChanges: boolean;
  error: string | null;
  isSaving: boolean;
  isGenerating: boolean;
  saveErrorData: any;
  
  // –ú–µ—Ç–æ–¥—ã
  updateHarvestedProduct: (updates: Partial<HarvestedProductData>) => void;
  saveChanges: () => Promise<boolean>;
  resetHarvestedProduct: () => void;
  generateTestData: () => Promise<void>;
  clearError: () => void;
  clearSaveError: () => void;
  handleSuccess: (message: string) => void;
}

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
 */
export const useHarvestedProductEdit = (harvestedProductId?: number): UseHarvestedProductEditReturn => {
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  const { 
    isInitialized, 
    isLoading: syncLoading, 
    sync: performSyncOriginal 
  } = useSyncData(harvestedProductsSyncConfig, {
    autoInitialize: true,
    autoSync: false
  });

  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º sync –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
  const performSync = useCallback(async (): Promise<void> => {
    await performSyncOriginal();
  }, [performSyncOriginal]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const {
    localError,
    saveErrorData,
    setLocalError,
    clearError: clearLocalError,
    clearSaveError,
    handleSaveError
  } = useValidationErrorHandler();

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
  const {
    harvestedProduct,
    isLoading: dataLoading,
    hasChanges,
    error: dataError,
    updateHarvestedProduct,
    resetHarvestedProduct,
    clearError: clearDataError
  } = useHarvestedProductData(harvestedProductId, handleSaveError);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
  const { isSaving, saveChanges: saveHarvestedProduct } = useSaveHarvestedProduct();

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const { isGenerating, generateTestData: generateTestDataAction } = useTestDataGeneration(
    {
      apiBaseUrl: DEFAULT_API_BASE_URL,
      onDataGenerated: (data) => {
        console.log('üéØ –ü–æ–ª—É—á–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:', data);
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        updateHarvestedProduct(data);
      },
      onError: handleSaveError,
      onStatusChange: (status) => {
        console.log('üìä –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', status);
      }
    },
    {
      isInitialized,
      syncLoading,
      performSync
    }
  );

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  const isLoading = dataLoading || syncLoading;
  const error = localError || dataError;

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –≤ JSON —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSONB –ø–æ–ª–µ–π
  const prepareDataForSave = useCallback((data: HarvestedProductData): HarvestedProductData => {
    const prepared = { ...data };
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤—ã –≤ JSON —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSONB –ø–æ–ª–µ–π
    if (Array.isArray(prepared.tags)) {
      prepared.tags = JSON.stringify(prepared.tags) as any;
    }
    if (prepared.additional_indicators && typeof prepared.additional_indicators === 'object') {
      prepared.additional_indicators = JSON.stringify(prepared.additional_indicators);
    }
    
    return prepared;
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveChanges = useCallback(async (): Promise<boolean> => {
    if (!harvestedProduct) {
      const errorMsg = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
      console.error('‚ùå', errorMsg);
      setLocalError(errorMsg);
      return false;
    }

    try {
      console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:', harvestedProduct.product_name);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤—ã –≤ JSON)
      const preparedData = prepareDataForSave(harvestedProduct);
      console.log('üîß –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', preparedData);
      
      const success = await saveHarvestedProduct(preparedData);
      
      if (success) {
        console.log('‚úÖ –£—Ä–æ–∂–∞–π–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        return true;
      } else {
        console.log('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å');
        return false;
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:', error);
      handleSaveError(error);
      return false;
    }
  }, [harvestedProduct, prepareDataForSave, saveHarvestedProduct, setLocalError, handleSaveError]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const generateTestData = useCallback(async () => {
    try {
      console.log('üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏...');
      await generateTestDataAction();
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∂–∞–π–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:', error);
      handleSaveError(error);
    }
  }, [generateTestDataAction, handleSaveError]);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const clearError = useCallback(() => {
    clearLocalError();
    clearDataError();
  }, [clearLocalError, clearDataError]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const handleSuccess = useCallback((message: string) => {
    console.log('üéâ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:', message);
    clearError();
  }, [clearError]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    harvestedProduct,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    hasChanges,
    error,
    isSaving,
    isGenerating,
    saveErrorData,
    
    // –ú–µ—Ç–æ–¥—ã
    updateHarvestedProduct,
    saveChanges,
    resetHarvestedProduct,
    generateTestData,
    clearError,
    clearSaveError,
    handleSuccess
  };
}; 
