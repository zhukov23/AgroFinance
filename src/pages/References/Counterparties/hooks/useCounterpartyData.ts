// src/pages/References/Counterparties/hooks/useCounterpartyData.ts

import { useState, useEffect, useCallback } from 'react';
import { useEntityLoader } from '../../../../hooks/useEntityLoader';
import { useSyncData } from '../../../../hooks/useSyncData';
import { counterpartiesSyncConfig } from '../config/syncConfig';
import { CounterpartyData } from './useCounterpartyEdit';
import { hasChanges } from '../../../../utils/validation.utils';

export interface UseCounterpartyDataReturn {
  // –î–∞–Ω–Ω—ã–µ
  counterparty: CounterpartyData | null;
  originalCounterparty: CounterpartyData | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean;
  isInitialized: boolean;
  error: string | null;
  hasChanges: boolean;
  
  // –ú–µ—Ç–æ–¥—ã
  loadCounterparty: (id: number) => Promise<void>;
  updateCounterparty: (updates: Partial<CounterpartyData>) => void;
  resetCounterparty: () => void;
  setCounterparty: (counterparty: CounterpartyData | null) => void;
  setOriginalCounterparty: (counterparty: CounterpartyData | null) => void;
  initializeNewCounterparty: () => void;
  clearError: () => void;
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
 */
export const useCounterpartyData = (
  counterpartyId?: number,
  errorHandler?: (error: any) => void
): UseCounterpartyDataReturn => {
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
  const [counterparty, setCounterparty] = useState<CounterpartyData | null>(null);
  const [originalCounterparty, setOriginalCounterparty] = useState<CounterpartyData | null>(null);
  const [isLoadingCounterparty, setIsLoadingCounterparty] = useState(false);
  const [loadAttempts, setLoadAttempts] = useState(0);
  const MAX_LOAD_ATTEMPTS = 3;

  // –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const {
    isInitialized,
    loadTableData,
    sync,
    error: syncError
  } = useSyncData(counterpartiesSyncConfig, {
    autoInitialize: true,
    autoSync: false
  });

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const entityLoader = useEntityLoader<CounterpartyData>(
    {
      syncConfig: counterpartiesSyncConfig,
      entityTableName: 'reference_counterparties',
      relatedTableNames: ['link_counterparties_bank_accounts', 'reference_banks']
    },
    useSyncData,
    errorHandler || (() => {})
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const currentHasChanges = hasChanges(counterparty, originalCounterparty);

  // –û–±—â–∞—è –æ—à–∏–±–∫–∞
  const error = syncError || entityLoader.error;

  // –°–±—Ä–æ—Å –ø—Ä–∏ —Å–º–µ–Ω–µ ID
  useEffect(() => {
    setLoadAttempts(0);
    setCounterparty(null);
    setOriginalCounterparty(null);
  }, [counterpartyId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ ID
  const loadCounterparty = useCallback(async (id: number) => {
    if (isLoadingCounterparty) {
      console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ ID: ${id}`);
    setIsLoadingCounterparty(true);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const allCounterparties = await loadTableData('reference_counterparties');
      console.log(`üìä –í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${allCounterparties.length}`);
      
      if (allCounterparties.length === 0) {
        console.log('üì• –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
        await sync();
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const counterpartiesAfterSync = await loadTableData('reference_counterparties');
        console.log(`üìä –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: ${counterpartiesAfterSync.length}`);
      }
      
      // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
      const foundCounterparty = allCounterparties.find((cp: any) => cp.id === id);
      
      if (foundCounterparty) {
        setCounterparty(foundCounterparty);
        setOriginalCounterparty(foundCounterparty);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: ${foundCounterparty.full_name}`);
      } else {
        console.log(`‚ùå –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ ${allCounterparties.length} –∑–∞–ø–∏—Å–µ–π`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const availableIds = allCounterparties.map((cp: any) => cp.id).slice(0, 10);
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: ${availableIds.join(', ')}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:', error);
      if (errorHandler) {
        errorHandler(error);
      }
    } finally {
      setIsLoadingCounterparty(false);
    }
  }, [isLoadingCounterparty, loadTableData, sync, errorHandler]);

  // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
  useEffect(() => {
    if (!counterpartyId && !counterparty && isInitialized) {
      initializeNewCounterparty();
    }
  }, [counterpartyId, isInitialized]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (counterpartyId && isInitialized && !counterparty && !isLoadingCounterparty && loadAttempts < MAX_LOAD_ATTEMPTS) {
      setLoadAttempts(prev => prev + 1);
      loadCounterparty(counterpartyId);
    }
  }, [counterpartyId, isInitialized, counterparty, isLoadingCounterparty, loadAttempts]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
  const initializeNewCounterparty = useCallback(() => {
    const newCounterparty: CounterpartyData = {
      id: 0,
      full_name: '',
      counterparty_type: [],
      is_active: true,
      legal_name: undefined,
      legal_address: undefined,
      contact_email: undefined,
      contract_number: undefined,
      contract_date: undefined,
      contact_phone: undefined
    };
    
    setCounterparty(newCounterparty);
    setOriginalCounterparty(newCounterparty);
    console.log('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç');
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
  const updateCounterparty = useCallback((updates: Partial<CounterpartyData>) => {
    setCounterparty(prev => {
      if (!prev) return null;
      
      // –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
      const { bank_accounts, ...cleanUpdates } = updates as any;
      return { ...prev, ...cleanUpdates };
    });
  }, []);

  // –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const resetCounterparty = useCallback(() => {
    if (originalCounterparty) {
      setCounterparty({ ...originalCounterparty });
      console.log('üîÑ –°–±—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞');
    }
  }, [originalCounterparty]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    counterparty,
    originalCounterparty,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading: entityLoader.isLoading || isLoadingCounterparty,
    isInitialized: isInitialized,
    error: error,
    hasChanges: currentHasChanges,
    
    // –ú–µ—Ç–æ–¥—ã
    loadCounterparty,
    updateCounterparty,
    resetCounterparty,
    setCounterparty,
    setOriginalCounterparty,
    initializeNewCounterparty,
    clearError: () => {
      entityLoader.clearError();
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  };
};