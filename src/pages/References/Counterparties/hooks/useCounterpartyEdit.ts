// src/pages/References/Counterparties/hooks/useCounterpartyEdit.ts

import { useMemo } from 'react';
import { useSyncData } from '../../../../hooks/useSyncData';
import { counterpartiesSyncConfig } from '../config/syncConfig';
import { Counterparty } from '../config/tableConfig';
import { useSaveCounterparty } from './useSaveCounterparty';
import { useValidationErrorHandler } from '../../../../hooks/useValidationErrorHandler';
import { useCounterpartyData } from './useCounterpartyData';
import { useBankAccountsManager } from './useBankAccountsManager';
import { useTestDataGeneration, createTestDataConfig } from './useTestDataGeneration';
import { BankInfo } from '../services/testDataGenerator';
import {DEFAULT_API_BASE_URL} from '../../../../dataSync/index';
// –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export type CounterpartyData = Counterparty;

export interface BankAccountData {
  id?: number;
  organization_id: number;
  bank_id: number;
  account_number: string;
  currency: string;
  is_primary: boolean;
  is_active: boolean;
  purpose: string;
  opening_date?: string;
  closing_date?: string;
  notes?: string;
  // –î–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∞ (–∏–∑ –¥–∂–æ–π–Ω–∞)
  bank_name?: string;
  bank_bik?: string;
  bank_correspondent_account?: string;
  bank_address?: string;
  bank_swift?: string;
}

export interface UseCounterpartyEditReturn {
  // –î–∞–Ω–Ω—ã–µ
  counterparty: CounterpartyData | null;
  bankAccounts: BankAccountData[];
  primaryBank: BankAccountData | null;
  additionalBanks: BankAccountData[];
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean;
  isInitialized: boolean;
  error: string | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  hasChanges: boolean;
  isSaving: boolean;
  isGenerating: boolean;
  
  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º
  updateCounterparty: (updates: Partial<CounterpartyData>) => void;
  resetCounterparty: () => void;
  
  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
  addBankAccount: (bankAccount: Omit<BankAccountData, 'id' | 'organization_id'>) => void;
  updateBankAccount: (id: number, updates: Partial<BankAccountData>) => void;
  removeBankAccount: (id: number) => void;
  setPrimaryBank: (id: number) => void;
  
  // –ú–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  saveChanges: () => Promise<boolean>;
  loadCounterparty: (id: number) => Promise<void>;
  generateTestData: () => Promise<void>;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  saveErrorData: any;
  clearSaveError: () => void;
  clearError: () => void;
  handleSuccess: (message: string, details?: string) => void;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
 * –¢–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö—É–∫–æ–≤
 */
export const useCounterpartyEdit = (counterpartyId?: number): UseCounterpartyEditReturn => {
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const { 
    localError, 
    saveErrorData, 
    clearError: clearValidationError, // ‚Üê –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    clearSaveError, 
    handleSaveError,
    handleSuccess  // ‚Üê –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–∞–∫ –∫–∞–∫ useToasts: true –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  } = useValidationErrorHandler();

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
  const counterpartyData = useCounterpartyData(counterpartyId, handleSaveError);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
  const bankManager = useBankAccountsManager(counterpartyId);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤)
  const {
    isInitialized,
    isLoading: syncLoading,
    error: syncError,
    loadTableData,
    tableData,
    sync: performSync
  } = useSyncData(counterpartiesSyncConfig, { 
    autoInitialize: true, 
    autoSync: false 
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const { isSaving, saveChanges: performSave } = useSaveCounterparty();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const banksData: BankInfo[] = useMemo(() => 
    tableData?.reference_banks || [], 
    [tableData]
  );

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const testDataGeneration = useTestDataGeneration(
    createTestDataConfig(
      counterpartiesSyncConfig.apiBaseUrl || DEFAULT_API_BASE_URL,
      (generatedCounterparty, generatedBankAccounts) => {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        counterpartyData.updateCounterparty(generatedCounterparty);
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        bankManager.setEntities([]);
        generatedBankAccounts.forEach(bankAccount => {
          console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç: ${bankAccount.account_number} (${bankAccount.bank_name})`);
          bankManager.addBankAccount(bankAccount);
        });
      },
      handleSaveError,
      (status) => console.log('üéØ TestDataGenerator —Å—Ç–∞—Ç—É—Å:', status)
    ),
    {
      isInitialized,
      syncLoading,
      banksData,
      performSync: async () => { await performSync(); }, // ‚Üê –û–±–µ—Ä—Ç–∫–∞
      loadTableData
    }
  );

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const isLoading = counterpartyData.isLoading || syncLoading || isSaving || testDataGeneration.isGenerating;
  const error = localError || counterpartyData.error || syncError;
  const hasChanges = counterpartyData.hasChanges || bankManager.hasChanges;

  // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const resetCounterparty = () => {
    counterpartyData.resetCounterparty();
    bankManager.resetEntities();
  };

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const saveChanges = async (): Promise<boolean> => {
    if (!counterpartyData.counterparty) {
      handleSaveError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return false;
    }

    try {
      const success = await performSave(counterpartyData.counterparty, bankManager.bankAccounts);
      
      if (success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        counterpartyData.setOriginalCounterparty({ ...counterpartyData.counterparty });
        bankManager.setOriginalEntities([...bankManager.bankAccounts]);
        console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (handleSuccess) {
          handleSuccess('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω', '–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        }
      }
      
      return success;
    } catch (error) {
      handleSaveError(error);
      return false;
    }
  };

  // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫
  const clearError = () => {
    clearValidationError(); // ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    counterpartyData.clearError();
  };

  return {
    // –î–∞–Ω–Ω—ã–µ
    counterparty: counterpartyData.counterparty,
    bankAccounts: bankManager.bankAccounts,
    primaryBank: bankManager.primaryBank || null,
    additionalBanks: bankManager.additionalBanks,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    isInitialized: counterpartyData.isInitialized,
    error,
    hasChanges,
    isSaving,
    isGenerating: testDataGeneration.isGenerating,
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º
    updateCounterparty: counterpartyData.updateCounterparty,
    resetCounterparty,
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
    addBankAccount: bankManager.addBankAccount,
    updateBankAccount: bankManager.updateBankAccount,
    removeBankAccount: bankManager.removeBankAccount,
    setPrimaryBank: bankManager.setPrimaryBank,
    
    // –ú–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    saveChanges,
    loadCounterparty: counterpartyData.loadCounterparty,
    generateTestData: testDataGeneration.generateTestData,
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    saveErrorData,
    clearSaveError,
    clearError, // ‚Üê –¢–µ–ø–µ—Ä—å —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    handleSuccess: handleSuccess! // ‚Üê –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–∞–∫ –∫–∞–∫ useToasts: true
  };
};