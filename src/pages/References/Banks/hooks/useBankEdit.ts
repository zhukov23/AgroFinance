// src/pages/References/Banks/hooks/useBankEdit.ts

import { useMemo } from 'react';
import { useSyncData } from '../../../../hooks/useSyncData';
import { banksSyncConfig } from '../config/syncConfig';
import { Bank } from '../config/tableConfig';
import { useSaveBank } from './useSaveBank';
import { useValidationErrorHandler } from '../../../../hooks/useValidationErrorHandler';
import { useBankData } from './useBankData';
import { useTestDataGeneration, createTestDataConfig } from './useTestDataGeneration';

// –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export type BankData = Bank;

export interface UseBankEditReturn {
  // –î–∞–Ω–Ω—ã–µ
  bank: BankData | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean;
  isInitialized: boolean;
  error: string | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  hasChanges: boolean;
  isSaving: boolean;
  isGenerating: boolean;
  
  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–º
  updateBank: (updates: Partial<BankData>) => void;
  resetBank: () => void;
  
  // –ú–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  saveChanges: () => Promise<boolean>;
  loadBank: (id: number) => Promise<void>;
  generateTestData: () => Promise<void>;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  saveErrorData: any;
  clearSaveError: () => void;
  clearError: () => void;
  handleSuccess: (message: string, details?: string) => void;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–∞–Ω–∫–∞
 * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö—É–∫–æ–≤
 */
export const useBankEdit = (bankId?: number): UseBankEditReturn => {
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const { 
    localError, 
    saveErrorData, 
    clearError, 
    clearSaveError, 
    handleSaveError,
    handleSuccess  
  } = useValidationErrorHandler();

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –±–∞–Ω–∫–∞
  const bankData = useBankData(bankId, handleSaveError);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const {
    isInitialized,
    isLoading: syncLoading,
    error: syncError,
    sync: performSync
  } = useSyncData(banksSyncConfig, { 
    autoInitialize: true, 
    autoSync: false 
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const { isSaving, saveChanges: performSave } = useSaveBank();

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const testDataGeneration = useTestDataGeneration(
    createTestDataConfig(
      banksSyncConfig.apiBaseUrl || 'http://localhost:3000',
      (generatedBank) => {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∞
        bankData.updateBank(generatedBank);
      },
      handleSaveError,
      (status) => console.log('üéØ TestDataGenerator —Å—Ç–∞—Ç—É—Å:', status)
    ),
    {
      isInitialized,
      syncLoading,
      performSync: async () => { await performSync(); }
    }
  );

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const isLoading = bankData.isLoading || syncLoading || isSaving || testDataGeneration.isGenerating;
  const error = localError || bankData.error || syncError;
  const hasChanges = bankData.hasChanges;

  // –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const resetBank = () => {
    bankData.resetBank();
  };

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const saveChanges = async (): Promise<boolean> => {
    if (!bankData.bank) {
      handleSaveError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return false;
    }

    try {
      const success = await performSave(bankData.bank);
      
      if (success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        bankData.setOriginalBank({ ...bankData.bank });
        console.log('‚úÖ –ë–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      }
      
      return success;
    } catch (error) {
      handleSaveError(error);
      return false;
    }
  };

  return {
    // –î–∞–Ω–Ω—ã–µ
    bank: bankData.bank,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    isInitialized: bankData.isInitialized,
    error,
    hasChanges,
    isSaving,
    isGenerating: testDataGeneration.isGenerating,
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–º
    updateBank: bankData.updateBank,
    resetBank,
    
    // –ú–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    saveChanges,
    loadBank: bankData.loadBank,
    generateTestData: testDataGeneration.generateTestData,
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    saveErrorData,
    clearSaveError,
    clearError: () => {
      clearError();
      bankData.clearError();
    },
    handleSuccess
  };
}; 
