// src/pages/References/StorageLocations/hooks/useStorageLocationData.ts

import { useState, useEffect, useCallback } from 'react';
import { useEntityLoader } from '../../../../hooks/useEntityLoader';
import { useSyncData } from '../../../../hooks/useSyncData';
import { storageLocationsSyncConfig } from '../config/syncConfig';
import { StorageLocationData } from './useStorageLocationEdit';
import { hasChanges } from '../../../../utils/validation.utils';
import {DEFAULT_API_BASE_URL} from '../../../../dataSync/index';
export interface UseStorageLocationDataReturn {
  // –î–∞–Ω–Ω—ã–µ
  storageLocation: StorageLocationData | null;
  originalStorageLocation: StorageLocationData | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean;
  isInitialized: boolean;
  error: string | null;
  hasChanges: boolean;
  
  // –ú–µ—Ç–æ–¥—ã
  loadStorageLocation: (id: number) => Promise<void>;
  updateStorageLocation: (updates: Partial<StorageLocationData>) => void;
  resetStorageLocation: () => void;
  setStorageLocation: (storageLocation: StorageLocationData | null) => void;
  setOriginalStorageLocation: (storageLocation: StorageLocationData | null) => void;
  initializeNewStorageLocation: () => void;
  clearError: () => void;
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
export const useStorageLocationData = (
  storageLocationId?: number,
  errorHandler?: (error: any) => void
): UseStorageLocationDataReturn => {
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  const [storageLocation, setStorageLocation] = useState<StorageLocationData | null>(null);
  const [originalStorageLocation, setOriginalStorageLocation] = useState<StorageLocationData | null>(null);
  const [isLoadingData, setIsLoadingData] = useState(false);
  const [loadAttempts, setLoadAttempts] = useState(0);
  const MAX_LOAD_ATTEMPTS = 3;

  // –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const {
    isInitialized,
    loadTableData,
    sync,
    error: syncError
  } = useSyncData(storageLocationsSyncConfig, {
    autoInitialize: true,
    autoSync: false
  });

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const entityLoader = useEntityLoader<StorageLocationData>(
    {
      syncConfig: storageLocationsSyncConfig,
      entityTableName: 'reference_storage_locations',
      relatedTableNames: ['reference_counterparties'] // –°–≤—è–∑—å —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏
    },
    useSyncData,
    errorHandler || (() => {})
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const currentHasChanges = hasChanges(storageLocation, originalStorageLocation);

  // –û–±—â–∞—è –æ—à–∏–±–∫–∞
  const error = syncError || entityLoader.error;

  // –°–±—Ä–æ—Å –ø—Ä–∏ —Å–º–µ–Ω–µ ID
  useEffect(() => {
    setLoadAttempts(0);
    setStorageLocation(null);
    setOriginalStorageLocation(null);
  }, [storageLocationId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ ID
  const loadStorageLocation = useCallback(async (id: number) => {
    if (isLoadingData) {
      console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è ID: ${id}`);
    setIsLoadingData(true);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const allLocations = await loadTableData('reference_storage_locations');
      console.log(`üìä –í—Å–µ–≥–æ –º–µ—Å—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ: ${allLocations.length}`);
      
      if (allLocations.length === 0) {
        console.log('üì• –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
        await sync();
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const locationsAfterSync = await loadTableData('reference_storage_locations');
        console.log(`üìä –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Å—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${locationsAfterSync.length}`);
      }
      
      // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
      const foundLocation = allLocations.find((location: any) => location.id === id);
      
      if (foundLocation) {
        setStorageLocation(foundLocation);
        setOriginalStorageLocation(foundLocation);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${foundLocation.name}`);
      } else {
        console.log(`‚ùå –ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ ${allLocations.length} –∑–∞–ø–∏—Å–µ–π`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const availableIds = allLocations.map((location: any) => location.id).slice(0, 10);
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –º–µ—Å—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${availableIds.join(', ')}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      if (errorHandler) {
        errorHandler(error);
      }
    } finally {
      setIsLoadingData(false);
    }
  }, [isLoadingData, loadTableData, sync, errorHandler]);

  // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (!storageLocationId && !storageLocation && isInitialized) {
      initializeNewStorageLocation();
    }
  }, [storageLocationId, isInitialized]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (storageLocationId && isInitialized && !storageLocation && !isLoadingData && loadAttempts < MAX_LOAD_ATTEMPTS) {
      setLoadAttempts(prev => prev + 1);
      loadStorageLocation(storageLocationId);
    }
  }, [storageLocationId, isInitialized, storageLocation, isLoadingData, loadAttempts]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  const initializeNewStorageLocation = useCallback(() => {
    const newLocation: StorageLocationData = {
      id: 0,
      name: '',
      storage_type: 'own',
      is_active: true
    };
    
    setStorageLocation(newLocation);
    setOriginalStorageLocation(newLocation);
    console.log('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è');
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  const updateStorageLocation = useCallback((updates: Partial<StorageLocationData>) => {
    setStorageLocation(prev => {
      if (!prev) return null;
      return { ...prev, ...updates };
    });
  }, []);

  // –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const resetStorageLocation = useCallback(() => {
    if (originalStorageLocation) {
      setStorageLocation({ ...originalStorageLocation });
      console.log('üîÑ –°–±—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  }, [originalStorageLocation]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    storageLocation,
    originalStorageLocation,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading: entityLoader.isLoading || isLoadingData,
    isInitialized: isInitialized,
    error: error,
    hasChanges: currentHasChanges,
    
    // –ú–µ—Ç–æ–¥—ã
    loadStorageLocation,
    updateStorageLocation,
    resetStorageLocation,
    setStorageLocation,
    setOriginalStorageLocation,
    initializeNewStorageLocation,
    clearError: () => {
      entityLoader.clearError();
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  };
}; 
