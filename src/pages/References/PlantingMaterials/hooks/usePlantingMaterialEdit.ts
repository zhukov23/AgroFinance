// src/pages/References/PlantingMaterials/hooks/usePlantingMaterialEdit.ts

import { useCallback } from 'react';
import { usePlantingMaterialData } from './usePlantingMaterialData';
import { useSavePlantingMaterial } from './useSavePlantingMaterial';
import { useTestDataGeneration } from './useTestDataGeneration';
import { useValidationErrorHandler } from '../../../../hooks/useValidationErrorHandler';
import { useSyncData } from '../../../../hooks/useSyncData';
import { plantingMaterialsSyncConfig } from '../config/syncConfig';
import {DEFAULT_API_BASE_URL} from '../../../../dataSync/index';

// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
export interface PlantingMaterialData {
  id?: number;
  name: string;
  scientific_name?: string;
  variety?: string;
  material_type: string;
  crop_category: string;
  season_type?: string;
  origin_country?: string;
  breeder?: string;
  maturity_days?: number;
  planting_rate?: number;
  planting_depth?: number;
  row_spacing?: number;
  plant_spacing?: number;
  potential_yield?: number;
  recommended_soil_types?: string[];
  ph_range_min?: number;
  ph_range_max?: number;
  frost_resistance?: number;
  drought_tolerance?: number;
  water_requirement?: string;
  planting_period_start?: string;
  planting_period_end?: string;
  harvest_period_start?: string;
  harvest_period_end?: string;
  disease_resistance?: string[];
  pest_resistance?: string[];
  storage_requirements?: string;
  shelf_life_months?: number;
  description?: string;
  cultivation_notes?: string;
  status?: string;
  rating?: number;
  notes?: string;
  tags?: string[];
  is_active?: boolean;
  manufacturer_id?: number;
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
}

export interface UsePlantingMaterialEditReturn {
  // –î–∞–Ω–Ω—ã–µ
  plantingMaterial: PlantingMaterialData | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean;
  hasChanges: boolean;
  error: string | null;
  isSaving: boolean;
  isGenerating: boolean;
  saveErrorData: any;
  
  // –ú–µ—Ç–æ–¥—ã
  updatePlantingMaterial: (updates: Partial<PlantingMaterialData>) => void;
  saveChanges: () => Promise<boolean>;
  resetPlantingMaterial: () => void;
  generateTestData: () => Promise<void>;
  clearError: () => void;
  clearSaveError: () => void;
  handleSuccess: (message: string) => void;
}

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 */
export const usePlantingMaterialEdit = (plantingMaterialId?: number): UsePlantingMaterialEditReturn => {
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  const { 
    isInitialized, 
    isLoading: syncLoading, 
    sync: performSyncOriginal 
  } = useSyncData(plantingMaterialsSyncConfig, {
    autoInitialize: true,
    autoSync: false
  });

  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º sync –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
  const performSync = useCallback(async (): Promise<void> => {
    await performSyncOriginal();
  }, [performSyncOriginal]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
const {
  localError,
  saveErrorData,
  setLocalError,
  clearError: clearLocalError,
  clearSaveError,
  handleSaveError
} = useValidationErrorHandler();

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  const {
    plantingMaterial,
    isLoading: dataLoading,
    hasChanges,
    error: dataError,
    updatePlantingMaterial,
    resetPlantingMaterial,
    clearError: clearDataError
  } = usePlantingMaterialData(plantingMaterialId, handleSaveError);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  const { isSaving, saveChanges: savePlantingMaterial } = useSavePlantingMaterial();

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const { isGenerating, generateTestData: generateTestDataAction } = useTestDataGeneration(
    {
      apiBaseUrl: DEFAULT_API_BASE_URL,
      onDataGenerated: (data) => {
        console.log('üéØ –ü–æ–ª—É—á–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', data);
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        updatePlantingMaterial(data);
      },
      onError: handleSaveError,
      onStatusChange: (status) => {
        console.log('üìä –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', status);
      }
    },
    {
      isInitialized,
      syncLoading,
      performSync
    }
  );

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  const isLoading = dataLoading || syncLoading;
  const error = localError || dataError;

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –≤ JSON —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSONB –ø–æ–ª–µ–π
  const prepareDataForSave = useCallback((data: PlantingMaterialData): PlantingMaterialData => {
    const prepared = { ...data };
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤—ã –≤ JSON —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSONB –ø–æ–ª–µ–π
    if (Array.isArray(prepared.recommended_soil_types)) {
      prepared.recommended_soil_types = JSON.stringify(prepared.recommended_soil_types) as any;
    }
    if (Array.isArray(prepared.disease_resistance)) {
      prepared.disease_resistance = JSON.stringify(prepared.disease_resistance) as any;
    }
    if (Array.isArray(prepared.pest_resistance)) {
      prepared.pest_resistance = JSON.stringify(prepared.pest_resistance) as any;
    }
    if (Array.isArray(prepared.tags)) {
      prepared.tags = JSON.stringify(prepared.tags) as any;
    }
    
    return prepared;
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveChanges = useCallback(async (): Promise<boolean> => {
    if (!plantingMaterial) {
      const errorMsg = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
      console.error('‚ùå', errorMsg);
      setLocalError(errorMsg);
      return false;
    }

    try {
      console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', plantingMaterial.name);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤—ã –≤ JSON)
      const preparedData = prepareDataForSave(plantingMaterial);
      console.log('üîß –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', preparedData);
      
      const success = await savePlantingMaterial(preparedData);
      
      if (success) {
        console.log('‚úÖ –ü–æ—Å–µ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        return true;
      } else {
        console.log('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å');
        return false;
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
      handleSaveError(error);
      return false;
    }
  }, [plantingMaterial, prepareDataForSave, savePlantingMaterial, setLocalError, handleSaveError]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const generateTestData = useCallback(async () => {
    try {
      console.log('üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞...');
      await generateTestDataAction();
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
      handleSaveError(error);
    }
  }, [generateTestDataAction, handleSaveError]);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const clearError = useCallback(() => {
    clearLocalError();
    clearDataError();
  }, [clearLocalError, clearDataError]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const handleSuccess = useCallback((message: string) => {
    console.log('üéâ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:', message);
    clearError();
  }, [clearError]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    plantingMaterial,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    hasChanges,
    error,
    isSaving,
    isGenerating,
    saveErrorData,
    
    // –ú–µ—Ç–æ–¥—ã
    updatePlantingMaterial,
    saveChanges,
    resetPlantingMaterial,
    generateTestData,
    clearError,
    clearSaveError,
    handleSuccess
  };
};