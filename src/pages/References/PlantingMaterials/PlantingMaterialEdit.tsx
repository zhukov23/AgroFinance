 import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardBody, CardHeader, Col, Container, Row, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';
import classnames from "classnames";
import { ErrorToast } from '../../../components/Common/MessageToast/ErrorToast';
import { SuccessToast } from '../../../components/Common/MessageToast/SuccessToast';
import { EntityEditActions } from '../../../components/Common/DataManagement/EntityEditActions';
import { usePlantingMaterialEdit } from './hooks/usePlantingMaterialEdit';
import BasicInfoTab from './components/BasicInfoTab';
import RequisitesTab from './components/RequisitesTab';
import AdditionalTab from './components/AdditionalTab';

const PlantingMaterialEdit = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const [activeTab, setActiveTab] = useState("1");
    
    const materialId = id === 'new' ? undefined : (id ? parseInt(id) : undefined);
    const isNewMaterial = id === 'new';
    
    const {
        plantingMaterial,
        isLoading,
        hasChanges,
        error,
        isSaving,
        isGenerating,
        updatePlantingMaterial,
        saveChanges,
        resetPlantingMaterial,
        generateTestData,
        clearError,
        saveErrorData,
        clearSaveError,
        handleSuccess
    } = usePlantingMaterialEdit(materialId);

    useEffect(() => {
        console.log('üîç saveErrorData –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', saveErrorData);
    }, [saveErrorData]);

    document.title = isNewMaterial 
        ? "–ù–æ–≤—ã–π –ø–æ—Å–µ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª | –ê–≥—Ä–æ –ü–û"
        : `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${plantingMaterial?.name || '–ü–æ—Å–µ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª'} | –ê–≥—Ä–æ –ü–û`;

    const tabChange = (tab: string) => {
        if (activeTab !== tab) setActiveTab(tab);
    };

    const [successToast, setSuccessToast] = useState<{
        message: string;
        details?: string;
        isVisible: boolean;
    } | null>(null);

    const handleSave = async () => {
        console.log('üîÑ handleSave –≤—ã–∑–≤–∞–Ω');
        console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ:', { 
            plantingMaterial: !!plantingMaterial, 
            isLoading, 
            isSaving, 
            hasChanges 
        });
        
        try {
            console.log('üì§ –í—ã–∑—ã–≤–∞–µ–º saveChanges...');
            const success = await saveChanges();
            console.log('üì• –†–µ–∑—É–ª—å—Ç–∞—Ç saveChanges:', success);
            
            if (success) {
                console.log('üéâ –ü–æ—Å–µ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                setSuccessToast({
                    message: '–ü–æ—Å–µ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
                    details: '–î–∞–Ω–Ω—ã–µ –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
                    isVisible: true
                });
            } else {
                console.log('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
            }
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –≤ handleSave:', error);
        }
    };

    const handleCancel = () => {
        if (hasChanges) {
            if (window.confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                navigate('/references/planting-materials');
            }
        } else {
            navigate('/references/planting-materials');
        }
    };

    if (isLoading) {
        console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º ErrorToast —Å –¥–∞–Ω–Ω—ã–º–∏:', saveErrorData);
        console.log('üé® –¢–∏–ø saveErrorData:', typeof saveErrorData);
        console.log('üé® saveErrorData?.failed?.length:', saveErrorData?.failed?.length);
        
        return (
            <div className="page-content">
                <Container fluid>
                    <div className="text-center p-5">
                        <div className="spinner-border text-primary" role="status">
                            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        </div>
                        <p className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞...</p>
                    </div>
                </Container>
                
                <ErrorToast 
                    errorData={saveErrorData} 
                    onClose={clearSaveError} 
                />
            </div>
        );
    }

    console.log('üé® –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä ErrorToast —Å –¥–∞–Ω–Ω—ã–º–∏:', saveErrorData);
    
    return (
        <React.Fragment>
            <div className="page-content">
                <Container fluid>
                    {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <Row>
                        <Col>
                            <div className="page-title-box d-sm-flex align-items-center justify-content-between">
                                <h4 className="mb-sm-0">
                                    {isNewMaterial ? '–ù–æ–≤—ã–π –ø–æ—Å–µ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–µ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞'}
                                </h4>
                                <div className="page-title-right">
                                    <ol className="breadcrumb m-0">
                                        <li className="breadcrumb-item">
                                            <a href="#" onClick={() => navigate('/references/planting-materials')}>
                                                –ü–æ—Å–µ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª
                                            </a>
                                        </li>
                                        <li className="breadcrumb-item active">
                                            {isNewMaterial ? '–°–æ–∑–¥–∞–Ω–∏–µ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'}
                                        </li>
                                    </ol>
                                </div>
                            </div>
                        </Col>
                    </Row>

                    {/* –û—à–∏–±–∫–∏ */}
                    {error && (
                        <Row>
                            <Col>
                                <div className="alert alert-danger d-flex align-items-center" role="alert">
                                    <i className="ri-error-warning-line me-2"></i>
                                    <div>
                                        <strong>–û—à–∏–±–∫–∞:</strong> {error}
                                        <button className="btn btn-sm btn-outline-danger ms-2" onClick={clearError}>
                                            –ó–∞–∫—Ä—ã—Ç—å
                                        </button>
                                    </div>
                                </div>
                            </Col>
                        </Row>
                    )}

                    <Row>
                        <Col>
                            <Card>
                                <CardHeader>
                                    <Nav className="nav-tabs-custom rounded card-header-tabs border-bottom-0" role="tablist">
                                        <NavItem>
                                            <NavLink
                                                className={classnames({ active: activeTab === "1" })}
                                                onClick={() => tabChange("1")}>
                                                <i className="ri-plant-line"></i>
                                                –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                            </NavLink>
                                        </NavItem>
                                        <NavItem>
                                            <NavLink
                                                className={classnames({ active: activeTab === "2" })}
                                                onClick={() => tabChange("2")}>
                                                <i className="ri-seedling-line"></i>
                                                –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                                            </NavLink>
                                        </NavItem>
                                        <NavItem>
                                            <NavLink
                                                className={classnames({ active: activeTab === "3" })}
                                                onClick={() => tabChange("3")}>
                                                <i className="ri-star-line"></i>
                                                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                                            </NavLink>
                                        </NavItem>
                                    </Nav>
                                </CardHeader>
                                
                                <CardBody className="p-4">
                                    <TabContent activeTab={activeTab}>
                                        <TabPane tabId="1">
                                            <BasicInfoTab
                                                plantingMaterial={plantingMaterial}
                                                updatePlantingMaterial={updatePlantingMaterial}
                                            />
                                        </TabPane>
                                        <TabPane tabId="2">
                                            <RequisitesTab
                                                plantingMaterial={plantingMaterial}
                                                updatePlantingMaterial={updatePlantingMaterial}
                                            />
                                        </TabPane>
                                        <TabPane tabId="3">
                                            <AdditionalTab
                                                plantingMaterial={plantingMaterial}
                                                updatePlantingMaterial={updatePlantingMaterial}
                                            />
                                        </TabPane>
                                    </TabContent>
                                    
                                    {/* –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                                    <Row>
                                        <Col lg={12}>
                                            <EntityEditActions
                                                onSave={handleSave}
                                                isSaving={isSaving}
                                                hasChanges={hasChanges}
                                                onReset={resetPlantingMaterial}
                                                onGenerateTestData={generateTestData}
                                                isGenerating={isGenerating}
                                                onCancel={handleCancel}
                                                disabled={isLoading}
                                            />
                                        </Col>
                                    </Row>
                                </CardBody>
                            </Card>
                        </Col>
                    </Row>
                </Container>
            </div>
            
            <ErrorToast 
                errorData={saveErrorData} 
                onClose={clearSaveError} 
            />
            <SuccessToast 
                message={successToast?.message || ''}
                details={successToast?.details}
                isVisible={successToast?.isVisible || false}
                onClose={() => setSuccessToast(null)}
            />
        </React.Fragment>
    );
};

export default PlantingMaterialEdit;
