// src/pages/References/Pesticides/hooks/usePesticideData.ts

import { useState, useEffect, useCallback } from 'react';
import { useEntityLoader } from '../../../../hooks/useEntityLoader';
import { useSyncData } from '../../../../hooks/useSyncData';
import { pesticideSyncConfig } from '../config/syncConfig';
import { PesticideData } from './usePesticideEdit';
import { hasChanges } from '../../../../utils/validation.utils';

export interface UsePesticideDataReturn {
  // –î–∞–Ω–Ω—ã–µ
  pesticide: PesticideData | null;
  originalPesticide: PesticideData | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean;
  isInitialized: boolean;
  error: string | null;
  hasChanges: boolean;
  
  // –ú–µ—Ç–æ–¥—ã
  loadPesticide: (id: number) => Promise<void>;
  updatePesticide: (updates: Partial<PesticideData>) => void;
  resetPesticide: () => void;
  setPesticide: (pesticide: PesticideData | null) => void;
  setOriginalPesticide: (pesticide: PesticideData | null) => void;
  initializeNewPesticide: () => void;
  clearError: () => void;
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –°–ó–† (–ø–µ—Å—Ç–∏—Ü–∏–¥–æ–≤)
 */
export const usePesticideData = (
  pesticideId?: number,
  errorHandler?: (error: any) => void
): UsePesticideDataReturn => {
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞
  const [pesticide, setPesticide] = useState<PesticideData | null>(null);
  const [originalPesticide, setOriginalPesticide] = useState<PesticideData | null>(null);
  const [isLoadingPesticide, setIsLoadingPesticide] = useState(false);
  const [loadAttempts, setLoadAttempts] = useState(0);
  const MAX_LOAD_ATTEMPTS = 3;

  // –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const {
    isInitialized,
    loadTableData,
    sync,
    error: syncError
  } = useSyncData(pesticideSyncConfig, {
    autoInitialize: true,
    autoSync: false
  });

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π
  const entityLoader = useEntityLoader<PesticideData>(
    {
      syncConfig: pesticideSyncConfig,
      entityTableName: 'reference_pesticides',
      relatedTableNames: ['reference_counterparties'] // –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏/–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
    },
    useSyncData,
    errorHandler || (() => {})
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const currentHasChanges = hasChanges(pesticide, originalPesticide);

  // –û–±—â–∞—è –æ—à–∏–±–∫–∞
  const error = syncError || entityLoader.error;

  // –°–±—Ä–æ—Å –ø—Ä–∏ —Å–º–µ–Ω–µ ID
  useEffect(() => {
    setLoadAttempts(0);
    setPesticide(null);
    setOriginalPesticide(null);
  }, [pesticideId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞ –ø–æ ID
  const loadPesticide = useCallback(async (id: number) => {
    if (isLoadingPesticide) {
      console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –°–ó–† —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –°–ó–† ID: ${id}`);
    setIsLoadingPesticide(true);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const allPesticides = await loadTableData('reference_pesticides');
      console.log(`üìä –í—Å–µ–≥–æ –°–ó–† –≤ —Ç–∞–±–ª–∏—Ü–µ: ${allPesticides.length}`);
      
      if (allPesticides.length === 0) {
        console.log('üì• –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
        await sync();
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const pesticidesAfterSync = await loadTableData('reference_pesticides');
        console.log(`üìä –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –°–ó–†: ${pesticidesAfterSync.length}`);
      }
      
      // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Å—Ç–∏—Ü–∏–¥
      const foundPesticide = allPesticides.find((item: any) => item.id === id);
      
      if (foundPesticide) {
        setPesticide(foundPesticide);
        setOriginalPesticide(foundPesticide);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –°–ó–†: ${foundPesticide.name}`);
      } else {
        console.log(`‚ùå –°–ó–† —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ ${allPesticides.length} –∑–∞–ø–∏—Å–µ–π`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const availableIds = allPesticides.map((item: any) => item.id).slice(0, 10);
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –°–ó–†: ${availableIds.join(', ')}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –°–ó–†:', error);
      if (errorHandler) {
        errorHandler(error);
      }
    } finally {
      setIsLoadingPesticide(false);
    }
  }, [isLoadingPesticide, loadTableData, sync, errorHandler]);

  // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞
  useEffect(() => {
    if (!pesticideId && !pesticide && isInitialized) {
      initializeNewPesticide();
    }
  }, [pesticideId, isInitialized]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (pesticideId && isInitialized && !pesticide && !isLoadingPesticide && loadAttempts < MAX_LOAD_ATTEMPTS) {
      setLoadAttempts(prev => prev + 1);
      loadPesticide(pesticideId);
    }
  }, [pesticideId, isInitialized, pesticide, isLoadingPesticide, loadAttempts]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞
  const initializeNewPesticide = useCallback(() => {
    const newPesticide: PesticideData = {
      id: 0,
      name: '',
      trade_name: '',
      registration_number: '',
      manufacturer_id: undefined,
      supplier_id: undefined,
      pesticide_type: 'herbicide',
      hazard_class: 'III',
      physical_form: 'liquid',
      active_substances: [],
      registration_status: 'active',
      is_active: true
    };
    
    setPesticide(newPesticide);
    setOriginalPesticide(newPesticide);
    console.log('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –°–ó–†');
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞
  const updatePesticide = useCallback((updates: Partial<PesticideData>) => {
    setPesticide(prev => {
      if (!prev) return null;
      return { ...prev, ...updates };
    });
  }, []);

  // –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const resetPesticide = useCallback(() => {
    if (originalPesticide) {
      setPesticide({ ...originalPesticide });
      console.log('üîÑ –°–±—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –°–ó–†');
    }
  }, [originalPesticide]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    pesticide,
    originalPesticide,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading: entityLoader.isLoading || isLoadingPesticide,
    isInitialized: isInitialized,
    error: error,
    hasChanges: currentHasChanges,
    
    // –ú–µ—Ç–æ–¥—ã
    loadPesticide,
    updatePesticide,
    resetPesticide,
    setPesticide,
    setOriginalPesticide,
    initializeNewPesticide,
    clearError: () => {
      entityLoader.clearError();
    }
  };
};