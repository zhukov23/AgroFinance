// src/pages/References/Pesticides/services/testDataGenerator.ts

import { testDataConfig } from '../config/testDataAIScript';
import { PesticideData } from '../hooks/usePesticideEdit';
import { AIDataGeneratorService, AIGeneratorOptions } from '../../../../services/AIDataGeneratorService';

export interface TestDataGeneratorOptions extends AIGeneratorOptions {}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å—Ç–∏—Ü–∏–¥–æ–≤
 */
export class TestDataGeneratorService {
  private aiGenerator: AIDataGeneratorService;
  private onStatusChange?: (status: string) => void;
  private onError?: (error: string) => void;

  constructor(options: TestDataGeneratorOptions = {}) {
    this.onStatusChange = options.onStatusChange;
    this.onError = options.onError;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    this.aiGenerator = new AIDataGeneratorService({
      apiBaseUrl: options.apiBaseUrl,
      onStatusChange: this.onStatusChange,
      onError: this.onError
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞
   * @returns —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞
   */
  async generatePesticideData(): Promise<Partial<PesticideData>> {
    console.log('üéØ TestDataGenerator: –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å—Ç–∏—Ü–∏–¥–∞...');

    this.updateStatus('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞...');

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
      const generatedData = await this.aiGenerator.generateData(testDataConfig.pesticide);
      
      if (generatedData.length === 0) {
        throw new Error('AI –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ');
      }

      const aiData = generatedData[0];
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞ (AI + –Ω–∞—à–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è)
      const pesticideData: Partial<PesticideData> = {
        // –î–∞–Ω–Ω—ã–µ –æ—Ç AI
        name: aiData.name,
        trade_name: aiData.trade_name,
        registration_number: aiData.registration_number,
        application_method: aiData.application_method,
        storage_conditions: aiData.storage_conditions,
        safety_precautions: aiData.safety_precautions,
        antidote_info: aiData.antidote_info,
        price_per_unit: aiData.price_per_unit,
        package_unit: aiData.package_unit,
        registration_authority: aiData.registration_authority,
        notes: aiData.notes,
        
        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–∏
        pesticide_type: this.getRandomPesticideType(),
        hazard_class: this.getRandomHazardClass(),
        physical_form: this.getRandomPhysicalForm(),
        active_substances: this.getRandomActiveSubstances(),
        concentration_info: this.getRandomConcentrationInfo(),
        target_pests: this.getRandomTargetPests(),
        target_crops: this.getRandomTargetCrops(),
        dosage_info: this.getRandomDosageInfo(),
        registration_status: this.getRandomRegistrationStatus(),
        registration_date: this.getRandomRegistrationDate(),
        expiry_date: this.getRandomExpiryDate(),
        base_price: this.getRandomBasePrice(),
        currency_code: this.getRandomCurrencyCode(),
        package_size: this.getRandomPackageSize(),
        shelf_life_months: this.getRandomShelfLife(),
        ph_range: this.getRandomPhRange(),
        temperature_range: this.getRandomTemperatureRange(),
        compatibility_info: this.getRandomCompatibilityInfo(),
        certificates: this.getRandomCertificates(),
        documents: this.getRandomDocuments(),
        is_active: true
      };

      this.updateStatus('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      console.log('‚úÖ TestDataGenerator: –î–∞–Ω–Ω—ã–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');

      return pesticideData;

    } catch (err) {
      const errorMessage = `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å—Ç–∏—Ü–∏–¥–∞: ${err}`;
      this.handleError(errorMessage);
      throw new Error(errorMessage);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  private getRandomPesticideType(): string {
    const types = ['herbicide', 'fungicide', 'insecticide', 'acaricide', 'nematicide', 'rodenticide', 'growth_regulator', 'adjuvant', 'biocide', 'combination'];
    return types[Math.floor(Math.random() * types.length)];
  }

  private getRandomHazardClass(): string {
    const classes = ['I', 'II', 'III', 'IV'];
    return classes[Math.floor(Math.random() * classes.length)];
  }

  private getRandomPhysicalForm(): string {
    const forms = ['liquid', 'powder', 'granules', 'emulsion', 'suspension', 'tablets', 'capsules', 'gel', 'aerosol'];
    return forms[Math.floor(Math.random() * forms.length)];
  }

  private getRandomActiveSubstances(): any[] {
    const substances = [
      { substance: '–≥–ª–∏—Ñ–æ—Å–∞—Ç', concentration: Math.round(Math.random() * 50 + 20), unit: '%' },
      { substance: '2,4-–î', concentration: Math.round(Math.random() * 30 + 10), unit: '%' },
      { substance: '–∏–º–∏–¥–∞–∫–ª–æ–ø—Ä–∏–¥', concentration: Math.round(Math.random() * 20 + 5), unit: '%' },
      { substance: '—Ç–µ–±—É–∫–æ–Ω–∞–∑–æ–ª', concentration: Math.round(Math.random() * 15 + 5), unit: '%' }
    ];
    const count = Math.floor(Math.random() * 3) + 1; // 1-3 –≤–µ—â–µ—Å—Ç–≤–∞
    return substances.slice(0, count);
  }

  private getRandomConcentrationInfo(): any {
    return {
      total_concentration: Math.round(Math.random() * 80 + 20),
      unit: '%',
      formulation_type: ['–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç —ç–º—É–ª—å—Å–∏–∏', '–≤–æ–¥–Ω—ã–π —Ä–∞—Å—Ç–≤–æ—Ä', '—Å—É—Å–ø–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç'][Math.floor(Math.random() * 3)]
    };
  }

  private getRandomTargetPests(): any[] {
    const pests = [
      { pest: '—Å–æ—Ä–Ω—è–∫–∏', effectiveness: '–≤—ã—Å–æ–∫–∞—è' },
      { pest: '–∫–æ–ª–æ—Ä–∞–¥—Å–∫–∏–π –∂—É–∫', effectiveness: '–≤—ã—Å–æ–∫–∞—è' },
      { pest: '—Ç–ª—è', effectiveness: '—Å—Ä–µ–¥–Ω—è—è' },
      { pest: '–ø–∞—É—Ç–∏–Ω–Ω—ã–π –∫–ª–µ—â', effectiveness: '–≤—ã—Å–æ–∫–∞—è' },
      { pest: '–º—É—á–Ω–∏—Å—Ç–∞—è —Ä–æ—Å–∞', effectiveness: '–≤—ã—Å–æ–∫–∞—è' }
    ];
    const count = Math.floor(Math.random() * 3) + 1;
    return pests.slice(0, count);
  }

  private getRandomTargetCrops(): any[] {
    const crops = [
      { crop: '–ø—à–µ–Ω–∏—Ü–∞', growth_stage: '–≤—Å—Ö–æ–¥—ã' },
      { crop: '–∫—É–∫—É—Ä—É–∑–∞', growth_stage: '–≤–µ–≥–µ—Ç–∞—Ü–∏—è' },
      { crop: '–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫', growth_stage: '—Ü–≤–µ—Ç–µ–Ω–∏–µ' },
      { crop: '—Å–æ—è', growth_stage: '–±—É—Ç–æ–Ω–∏–∑–∞—Ü–∏—è' },
      { crop: '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', growth_stage: '–≤—Å—Ö–æ–¥—ã' }
    ];
    const count = Math.floor(Math.random() * 3) + 1;
    return crops.slice(0, count);
  }

  private getRandomDosageInfo(): any {
    const minDose = Math.round((Math.random() * 2 + 0.5) * 100) / 100;
    const maxDose = Math.round((minDose + Math.random() * 2) * 100) / 100;
    return {
      min_dose: minDose,
      max_dose: maxDose,
      unit: ['–ª/–≥–∞', '–∫–≥/–≥–∞', '–≥/–≥–∞'][Math.floor(Math.random() * 3)]
    };
  }

  private getRandomRegistrationStatus(): string {
    const statuses = ['active', 'expired', 'suspended', 'cancelled'];
    const weights = [0.7, 0.15, 0.1, 0.05]; // –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è active
    const random = Math.random();
    let cumulative = 0;
    for (let i = 0; i < weights.length; i++) {
      cumulative += weights[i];
      if (random < cumulative) return statuses[i];
    }
    return statuses[0];
  }

  private getRandomRegistrationDate(): string {
    const start = new Date(2015, 0, 1);
    const end = new Date(2024, 11, 31);
    const randomDate = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    return randomDate.toISOString().split('T')[0];
  }

  private getRandomExpiryDate(): string {
    const start = new Date(2025, 0, 1);
    const end = new Date(2030, 11, 31);
    const randomDate = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    return randomDate.toISOString().split('T')[0];
  }

  private getRandomBasePrice(): number {
    return Math.round((Math.random() * 50000 + 1000) * 100) / 100; // 1000-51000 —Ä—É–±
  }

  private getRandomCurrencyCode(): string {
    const currencies = ['RUB', 'USD', 'EUR'];
    const weights = [0.8, 0.15, 0.05]; // –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è RUB
    const random = Math.random();
    let cumulative = 0;
    for (let i = 0; i < weights.length; i++) {
      cumulative += weights[i];
      if (random < cumulative) return currencies[i];
    }
    return currencies[0];
  }

  private getRandomPackageSize(): number {
    const sizes = [0.1, 0.25, 0.5, 1, 5, 10, 20, 200, 1000];
    return sizes[Math.floor(Math.random() * sizes.length)];
  }

  private getRandomShelfLife(): number {
    const months = [12, 18, 24, 36, 48, 60];
    return months[Math.floor(Math.random() * months.length)];
  }

  private getRandomPhRange(): any {
    const minPh = Math.round((Math.random() * 3 + 5) * 10) / 10; // 5.0-8.0
    const maxPh = Math.round((minPh + Math.random() * 2) * 10) / 10;
    return {
      min: minPh,
      max: maxPh
    };
  }

  private getRandomTemperatureRange(): any {
    const minTemp = Math.floor(Math.random() * 10); // 0-9¬∞C
    const maxTemp = Math.floor(Math.random() * 15 + 20); // 20-34¬∞C
    return {
      min: minTemp,
      max: maxTemp,
      unit: '¬∞C'
    };
  }

  private getRandomCompatibilityInfo(): any {
    const compatible = ['–º–µ–¥–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã', '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥—ã', '—Å—Ç–∏–º—É–ª—è—Ç–æ—Ä—ã —Ä–æ—Å—Ç–∞'];
    const incompatible = ['—â–µ–ª–æ—á–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã', '–º–∞—Å–ª—è–Ω—ã–µ —Ä–∞—Å—Ç–≤–æ—Ä—ã'];
    return {
      compatible_with: compatible.slice(0, Math.floor(Math.random() * 2) + 1),
      incompatible_with: incompatible.slice(0, Math.floor(Math.random() * 2))
    };
  }

  private getRandomCertificates(): any {
    const certs = [
      { type: 'GMP', number: `GMP-${Math.floor(Math.random() * 9000) + 1000}`, valid_until: '2026-12-31' },
      { type: 'ISO 9001', number: `ISO-${Math.floor(Math.random() * 9000) + 1000}`, valid_until: '2027-06-30' }
    ];
    return certs.slice(0, Math.floor(Math.random() * 2) + 1);
  }

  private getRandomDocuments(): any {
    return {
      safety_sheet: `safety_sheet_${Math.floor(Math.random() * 1000)}.pdf`,
      instruction: `instruction_${Math.floor(Math.random() * 1000)}.pdf`,
      certificate: `certificate_${Math.floor(Math.random() * 1000)}.pdf`
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private updateStatus(status: string): void {
    if (this.onStatusChange) {
      this.onStatusChange(status);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
   */
  private handleError(error: string): void {
    console.error('‚ùå TestDataGenerator:', error);
    if (this.onError) {
      this.onError(error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ö—É–∫–∞—Ö
export const createTestDataGenerator = (options?: TestDataGeneratorOptions): TestDataGeneratorService => {
  return new TestDataGeneratorService(options);
};

export const generateTestData = async (apiBaseUrl?: string): Promise<Partial<PesticideData>> => {
  const generator = createTestDataGenerator({ apiBaseUrl });
  return generator.generatePesticideData();
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
export const TestDataGeneratorUtils = {
  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å—Ç–∏—Ü–∏–¥–∞
   */
  validatePesticideData: (pesticide: any): pesticide is PesticideData => {
    return pesticide && 
           typeof pesticide.name === 'string' &&
           typeof pesticide.pesticide_type === 'string' &&
           typeof pesticide.hazard_class === 'string';
  },

  /**
   * –°–æ–∑–¥–∞–µ—Ç mock –¥–∞–Ω–Ω—ã–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
   */
  createMockPesticide: (id: number, name: string): Partial<PesticideData> => ({
    id,
    name,
    pesticide_type: 'herbicide',
    hazard_class: 'III',
    physical_form: 'liquid',
    active_substances: [],
    is_active: true
  })
}; 
