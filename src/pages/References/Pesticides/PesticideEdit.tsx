// src/pages/References/Pesticides/PesticideEdit.tsx

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardBody, CardHeader, Col, Container, Row, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';
import classnames from "classnames";
import { ErrorToast } from '../../../components/Common/MessageToast/ErrorToast';
import { SuccessToast } from '../../../components/Common/MessageToast/SuccessToast';
import { EntityEditActions } from '../../../components/Common/DataManagement/EntityEditActions';
import { usePesticideEdit } from './hooks/usePesticideEdit';
import BasicInfoTab from './components/BasicInfoTab';
import RequisitesTab from './components/RequisitesTab';
import AdditionalTab from './components/AdditionalTab';

const PesticideEdit = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const [activeTab, setActiveTab] = useState("1");
    
    const pesticideId = id === 'new' ? undefined : (id ? parseInt(id) : undefined);
    const isNewPesticide = id === 'new';
    
    const {
        pesticide,
        isLoading,
        hasChanges,
        error,
        isSaving,
        isGenerating,
        updatePesticide,
        saveChanges,
        resetPesticide,
        generateTestData,
        clearError,
        saveErrorData,
        clearSaveError,
        handleSuccess
    } = usePesticideEdit(pesticideId);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–æ–≤
    const [validationErrors, setValidationErrors] = useState<{[key: string]: string}>({});
    const [tabsWithErrors, setTabsWithErrors] = useState<{[key: string]: boolean}>({});

    useEffect(() => {
        console.log('üîç saveErrorData –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', saveErrorData);
    }, [saveErrorData]);

    document.title = isNewPesticide 
        ? "–ù–æ–≤—ã–π –ø–µ—Å—Ç–∏—Ü–∏–¥ | –ê–≥—Ä–æ –ü–û"
        : `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${pesticide?.name || '–ü–µ—Å—Ç–∏—Ü–∏–¥'} | –ê–≥—Ä–æ –ü–û`;

    const tabChange = (tab: string) => {
        if (activeTab !== tab) setActiveTab(tab);
    };

    const [successToast, setSuccessToast] = useState<{
        message: string;
        details?: string;
        isVisible: boolean;
    } | null>(null);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    const validateAllFields = () => {
        const errors: {[key: string]: string} = {};
        const tabErrors: {[key: string]: boolean} = {};

        if (!pesticide) {
            errors.general = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏';
            return { errors, tabErrors };
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–¢–∞–± 1 - –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        if (!pesticide.name?.trim()) {
            errors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
            tabErrors['1'] = true;
        } else if (pesticide.name.trim().length < 2) {
            errors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
            tabErrors['1'] = true;
        }

        if (!pesticide.pesticide_type) {
            errors.pesticide_type = '–¢–∏–ø –ø–µ—Å—Ç–∏—Ü–∏–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
            tabErrors['1'] = true;
        }

        if (!pesticide.hazard_class) {
            errors.hazard_class = '–ö–ª–∞—Å—Å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
            tabErrors['1'] = true;
        }

        if (!pesticide.physical_form) {
            errors.physical_form = '–§–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
            tabErrors['1'] = true;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤
        if (!pesticide.active_substances || !Array.isArray(pesticide.active_substances) || pesticide.active_substances.length === 0) {
            errors.active_substances = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ';
            tabErrors['1'] = true;
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞
            const invalidSubstances = pesticide.active_substances.some((substance: any) => 
                !substance.substance?.trim() || !substance.concentration || substance.concentration <= 0
            );
            if (invalidSubstances) {
                errors.active_substances = '–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã';
                tabErrors['1'] = true;
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        if (pesticide.registration_number && !/^[A-Za-z0-9\-]*$/.test(pesticide.registration_number)) {
            errors.registration_number = '–ù–æ–º–µ—Ä –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã';
            tabErrors['1'] = true;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
        if (pesticide.base_price !== undefined && pesticide.base_price !== null) {
            if (pesticide.base_price <= 0) {
                errors.base_price = '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
                tabErrors['3'] = true;
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —É–ø–∞–∫–æ–≤–∫–∏
        if (pesticide.package_size !== undefined && pesticide.package_size !== null) {
            if (pesticide.package_size <= 0) {
                errors.package_size = '–†–∞–∑–º–µ—Ä —É–ø–∞–∫–æ–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
                tabErrors['3'] = true;
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
        if (pesticide.shelf_life_months !== undefined && pesticide.shelf_life_months !== null) {
            if (pesticide.shelf_life_months <= 0) {
                errors.shelf_life_months = '–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
                tabErrors['3'] = true;
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (pesticide.registration_date && pesticide.expiry_date) {
            const regDate = new Date(pesticide.registration_date);
            const expDate = new Date(pesticide.expiry_date);
            if (expDate <= regDate) {
                errors.expiry_date = '–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
                tabErrors['3'] = true;
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∑–∏—Ä–æ–≤–∫–∏
        if (pesticide.dosage_info && typeof pesticide.dosage_info === 'object') {
            const { min_dose, max_dose } = pesticide.dosage_info;
            if (min_dose !== undefined && max_dose !== undefined && min_dose > max_dose) {
                errors.dosage_info = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π';
                tabErrors['2'] = true;
            }
        }

        return { errors, tabErrors };
    };

    const handleSave = async () => {
        console.log('üîÑ handleSave –≤—ã–∑–≤–∞–Ω');
        
        // –ü—Ä–æ–≤–æ–¥–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        const { errors, tabErrors } = validateAllFields();
        setValidationErrors(errors);
        setTabsWithErrors(tabErrors);

        if (Object.keys(errors).length > 0) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            const errorMessages = Object.entries(errors).map(([field, message]) => message);
            const tabsWithErrorsList = Object.keys(tabErrors).map(tabId => {
                const tabNames: {[key: string]: string} = {
                    '1': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                    '2': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
                    '3': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
                };
                return tabNames[tabId] || `–¢–∞–± ${tabId}`;
            });

            console.log('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors);
            setSuccessToast({
                message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–∞—Ö: ${tabsWithErrorsList.join(', ')}. ${errorMessages.join('. ')}`,
                isVisible: true
            });
            return;
        }

        try {
            console.log('üì§ –í—ã–∑—ã–≤–∞–µ–º saveChanges...');
            const success = await saveChanges();
            
            if (success) {
                console.log('üéâ –ü–µ—Å—Ç–∏—Ü–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
                // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                setValidationErrors({});
                setTabsWithErrors({});
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                setSuccessToast({
                    message: '–ü–µ—Å—Ç–∏—Ü–∏–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
                    details: '–î–∞–Ω–Ω—ã–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
                    isVisible: true
                });
            } else {
                console.log('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
            }
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –≤ handleSave:', error);
        }
    };

    const handleCancel = () => {
        if (hasChanges) {
            if (window.confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                navigate('/references/pesticides');
            }
        } else {
            navigate('/references/pesticides');
        }
    };

    if (isLoading) {
        return (
            <div className="page-content">
                <Container fluid>
                    <div className="text-center p-5">
                        <div className="spinner-border text-primary" role="status">
                            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        </div>
                        <p className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å—Ç–∏—Ü–∏–¥–∞...</p>
                    </div>
                </Container>
                
                <ErrorToast 
                    errorData={saveErrorData} 
                    onClose={clearSaveError} 
                />
            </div>
        );
    }

    return (
        <React.Fragment>
            <div className="page-content">
                <Container fluid>
                    {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <Row>
                        <Col>
                            <div className="page-title-box d-sm-flex align-items-center justify-content-between">
                                <h4 className="mb-sm-0">
                                    {isNewPesticide ? '–ù–æ–≤—ã–π –ø–µ—Å—Ç–∏—Ü–∏–¥' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞'}
                                </h4>
                                <div className="page-title-right">
                                    <ol className="breadcrumb m-0">
                                        <li className="breadcrumb-item">
                                            <a href="#" onClick={() => navigate('/references/pesticides')}>
                                                –ü–µ—Å—Ç–∏—Ü–∏–¥—ã
                                            </a>
                                        </li>
                                        <li className="breadcrumb-item active">
                                            {isNewPesticide ? '–°–æ–∑–¥–∞–Ω–∏–µ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'}
                                        </li>
                                    </ol>
                                </div>
                            </div>
                        </Col>
                    </Row>

                    {/* –û—à–∏–±–∫–∏ */}
                    {error && (
                        <Row>
                            <Col>
                                <div className="alert alert-danger d-flex align-items-center" role="alert">
                                    <i className="ri-error-warning-line me-2"></i>
                                    <div>
                                        <strong>–û—à–∏–±–∫–∞:</strong> {error}
                                        <button className="btn btn-sm btn-outline-danger ms-2" onClick={clearError}>
                                            –ó–∞–∫—Ä—ã—Ç—å
                                        </button>
                                    </div>
                                </div>
                            </Col>
                        </Row>
                    )}

                    <Row>
                        <Col>
                            <Card>
                                <CardHeader>
                                    <Nav className="nav-tabs-custom rounded card-header-tabs border-bottom-0" role="tablist">
                                        <NavItem>
                                            <NavLink
                                                className={classnames({ 
                                                    active: activeTab === "1",
                                                    'text-danger': tabsWithErrors['1']
                                                })}
                                                onClick={() => tabChange("1")}>
                                                <i className="ri-flask-line"></i>
                                                –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                                {tabsWithErrors['1'] && <i className="ri-error-warning-line ms-1 text-danger"></i>}
                                            </NavLink>
                                        </NavItem>
                                        <NavItem>
                                            <NavLink
                                                className={classnames({ 
                                                    active: activeTab === "2",
                                                    'text-danger': tabsWithErrors['2']
                                                })}
                                                onClick={() => tabChange("2")}>
                                                <i className="ri-plant-line"></i>
                                                –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
                                                {tabsWithErrors['2'] && <i className="ri-error-warning-line ms-1 text-danger"></i>}
                                            </NavLink>
                                        </NavItem>
                                        <NavItem>
                                            <NavLink
                                                className={classnames({ 
                                                    active: activeTab === "3",
                                                    'text-danger': tabsWithErrors['3']
                                                })}
                                                onClick={() => tabChange("3")}>
                                                <i className="ri-more-line"></i>
                                                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                                                {tabsWithErrors['3'] && <i className="ri-error-warning-line ms-1 text-danger"></i>}
                                            </NavLink>
                                        </NavItem>
                                    </Nav>
                                </CardHeader>
                                
                                <CardBody className="p-4">
                                    <TabContent activeTab={activeTab}>
                                        <TabPane tabId="1">
                                            <BasicInfoTab
                                                pesticide={pesticide}
                                                updatePesticide={updatePesticide}
                                                validationErrors={validationErrors}
                                            />
                                        </TabPane>
                                        <TabPane tabId="2">
                                            <RequisitesTab
                                                pesticide={pesticide}
                                                updatePesticide={updatePesticide}
                                                validationErrors={validationErrors}
                                            />
                                        </TabPane>
                                        <TabPane tabId="3">
                                            <AdditionalTab
                                                pesticide={pesticide}
                                                updatePesticide={updatePesticide}
                                                validationErrors={validationErrors}
                                            />
                                        </TabPane>
                                    </TabContent>
                                    
                                    {/* –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                                    <Row>
                                        <Col lg={12}>
                                            <EntityEditActions
                                                onSave={handleSave}
                                                isSaving={isSaving}
                                                hasChanges={hasChanges}
                                                onReset={resetPesticide}
                                                onGenerateTestData={generateTestData}
                                                isGenerating={isGenerating}
                                                onCancel={handleCancel}
                                                disabled={isLoading}
                                            />
                                        </Col>
                                    </Row>
                                </CardBody>
                            </Card>
                        </Col>
                    </Row>
                </Container>
            </div>
            
            <ErrorToast 
                errorData={saveErrorData} 
                onClose={clearSaveError} 
            />
            <SuccessToast 
                message={successToast?.message || ''}
                details={successToast?.details}
                isVisible={successToast?.isVisible || false}
                onClose={() => setSuccessToast(null)}
            />
        </React.Fragment>
    );
};

export default PesticideEdit;